var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/A11yUtility.html",[0,1.864,1,2.859]],["body/injectables/A11yUtility.html",[1,1.255,2,0.753,3,0.112,4,0.083,5,0.083,6,1.255,7,1.576,8,2.464,9,0.986,10,1.255,11,1.255,12,0.818,13,1.488,14,4.244,15,1.255,16,4.416,17,1.255,18,2.057,19,1.488,20,1.823,21,1.101,22,1.255,23,2.182,24,0.645,25,0.558,26,0.895,27,0.027,28,0.986,29,1.488,30,1.488,31,0.986,32,1.758,33,2.091,34,4.381,35,1.488,36,2.66,37,1.488,38,0.112,39,0.748,40,3.154,41,4.638,42,2.464,43,2.464,44,2.464,45,2.464,46,2.464,47,2.464,48,2.464,49,2.464,50,2.464,51,2.464,52,2.464,53,2.464,54,2.464,55,2.464,56,2.464,57,2.464,58,2.464,59,1.488,60,1.528,61,2.66,62,2.078,63,2.464,64,1.152,65,1.488,66,3.668,67,1.488,68,0.986,69,2.078,70,2.078,71,1.488,72,1.488,73,1.488,74,1.488,75,1.488,76,1.255,77,2.065,78,1.167,79,0.388,80,1.378,81,1.375,82,0.924,83,2.078,84,1.255,85,1.488,86,2.464,87,1.488,88,1.488,89,1.488,90,1.96,91,1.255,92,2.464,93,2.147,94,1.255,95,1.488,96,1.488,97,1.488,98,3.787,99,1.488,100,3.154,101,3.093,102,1.488,103,1.488,104,1.488,105,1.488,106,1.488,107,1.101,108,1.488,109,1.488,110,2.464,111,2.091,112,1.488,113,1.488,114,1.488,115,2.464,116,2.464,117,2.464,118,1.488,119,1.323,120,1.101,121,0.753,122,1.488,123,0.986,124,2.464,125,2.078,126,3.154,127,3.154,128,1.488,129,5.914,130,3.724,131,4.295,132,2.464,133,4.672,134,2.402,135,1.689,136,1.488,137,2.464,138,1.488,139,2.464,140,1.488,141,2.464,142,1.488,143,2.464,144,1.488,145,2.464,146,1.488,147,2.464,148,1.488,149,3.093,150,1.488,151,2.464,152,1.488,153,4.852,154,3.008,155,4.374,156,2.464,157,2.464,158,2.078,159,4.065,160,2.464,161,1.488,162,3.668,163,1.488,164,1.488,165,1.633,166,1.488,167,3.668,168,1.488,169,1.488,170,3.093,171,1.247,172,1.488,173,1.488,174,1.488,175,1.101,176,1.488,177,1.488,178,1.488,179,1.255,180,0.01,181,0.01]],["title/interfaces/BreakpointConfig.html",[182,1.03,183,2.859]],["body/interfaces/BreakpointConfig.html",[3,0.332,4,0.246,5,0.246,7,1.161,27,0.026,38,0.332,64,3.184,79,0.425,180,0.022,181,0.022,183,3.707,184,1.335,185,3.253,186,3.253,187,2.418,188,4.396,189,4.396,190,0.92,191,3.926,192,4.383,193,3.926,194,4.383,195,4.383,196,4.383]],["title/components/ButtonComponent.html",[197,0.895,198,1.585]],["body/components/ButtonComponent.html",[3,0.204,4,0.151,5,0.151,27,0.027,38,0.204,60,1.037,78,0.913,79,0.353,80,0.62,81,1.734,82,1.734,93,1.372,119,0.881,121,1.988,134,1.173,135,0.881,170,4.28,180,0.016,181,0.016,197,0.715,198,2.374,199,1.837,200,1.794,201,1.488,202,1.488,203,2.706,204,1.173,205,2.667,206,3.114,207,3.428,208,1.014,209,1.09,210,1.794,211,1.794,212,3.929,213,1.37,214,1.837,215,3.929,216,3.066,217,3.573,218,3.313,219,3.929,220,2.604,221,3.313,222,3.423,223,3.241,224,1.266,225,2.706,226,1.627,227,2.706,228,2.282,229,2.706,230,2.161,231,3.313,232,4.626,233,3.901,234,2.282,235,2.706,236,2.706,237,2.706,238,1.794,239,1.794,240,1.627,241,2.282,242,2.282,243,2.604,244,2.781,245,2.003,246,2.706,247,3.989,248,2.003,249,2.003,250,1.794,251,1.627,252,2.003,253,2.003,254,2.907,255,2.907,256,2.003,257,2.003,258,2.003,259,2.706,260,2.706,261,2.003,262,2.282,263,2.282,264,2.282,265,2.706,266,4.626,267,2.282,268,2.706,269,2.282,270,2.003,271,3.066,272,2.003,273,3.929,274,3.313,275,2.282,276,2.003,277,1.794,278,2.282,279,1.173,280,1.988,281,1.014,282,2.792,283,1.488,284,1.488,285,1.488,286,1.488,287,1.488,288,1.37,289,1.488,290,1.473,291,2.161,292,1.37,293,1.09,294,1.266,295,1.37,296,1.37,297,1.488,298,1.279,299,1.488,300,1.266,301,1.488]],["title/components/ButtonComponent-1.html",[119,0.926,197,0.751,198,1.329]],["body/components/ButtonComponent-1.html",[3,0.113,4,0.084,5,0.084,18,0.758,27,0.028,31,2.1,32,1.535,38,0.187,39,0.752,60,0.395,64,0.7,77,0.865,78,0.805,79,0.37,80,0.567,81,1.999,82,1.891,90,1.431,93,0.865,111,2.441,119,0.807,121,2.064,134,1.768,135,0.488,171,1.604,175,1.833,180,0.01,181,0.01,190,0.418,191,1.642,193,1.642,197,0.837,198,1.722,199,1.159,200,2.441,201,0.824,202,0.824,204,0.649,205,2.254,206,1.604,207,3.148,208,0.561,209,0.603,210,0.993,211,0.993,213,0.758,214,1.159,216,2.441,220,1.642,222,2.345,223,2.214,224,1.159,226,2.453,230,0.824,238,2.441,239,2.1,240,2.642,241,2.089,242,1.263,243,3.344,244,0.9,245,1.833,250,2.1,251,2.797,261,2.345,262,1.263,263,2.089,269,2.672,271,0.993,277,1.642,279,0.649,280,1.254,281,0.561,282,2.025,283,0.824,284,0.824,285,1.363,286,1.363,287,0.824,288,0.758,289,0.824,290,1.188,291,1.363,292,0.758,293,0.603,294,0.7,295,0.758,296,0.758,297,0.824,298,0.807,299,0.824,300,1.908,301,0.824,302,1.263,303,0.758,304,1.263,305,1.108,306,1.498,307,1.498,308,1.108,309,1.108,310,1.108,311,1.108,312,2.478,313,4.395,314,2.478,315,2.478,316,3.169,317,2.672,318,1.833,319,2.1,320,3.44,321,2.345,322,3.44,323,2.478,324,2.478,325,2.478,326,2.089,327,2.089,328,2.478,329,2.478,330,0.523,331,0.561,332,1.263,333,1.263,334,1.263,335,1.498,336,2.478,337,2.478,338,1.49,339,1.498,340,1.108,341,1.833,342,0.9,343,1.642,344,1.498,345,1.498,346,1.263,347,1.498,348,0.488,349,0.993,350,1.604,351,1.108,352,1.263,353,0.824,354,1.498,355,1.498,356,1.498,357,1.498,358,1.498,359,1.498,360,6.225,361,3.683,362,2.672,363,4.497,364,1.498,365,4.079,366,3.169,367,1.498,368,1.905,369,1.498,370,2.478,371,1.263,372,1.833,373,1.263,374,2.089,375,1.263,376,1.833,377,1.108,378,1.498,379,1.498,380,1.833,381,2.1,382,2.089,383,2.672,384,1.604,385,3.105,386,2.672,387,2.478,388,2.672,389,1.108,390,1.108,391,1.833,392,1.263,393,1.263,394,1.498,395,1.905,396,3.018,397,0.9,398,0.9,399,1.108,400,1.263,401,2.478,402,1.498,403,1.498,404,1.498,405,1.498,406,3.169,407,2.478,408,3.683,409,1.263,410,1.498,411,1.498,412,2.478,413,1.498,414,1.498,415,1.498,416,1.498,417,1.263,418,1.498,419,1.498,420,1.498,421,1.498,422,1.498,423,1.263,424,1.498,425,1.498,426,2.089,427,1.498,428,1.498,429,1.498]],["title/interfaces/CachedIconDefinition.html",[182,1.03,430,2.859]],["body/interfaces/CachedIconDefinition.html",[3,0.361,4,0.268,5,0.268,27,0.026,38,0.361,60,1.683,78,1.214,79,0.403,180,0.023,181,0.023,184,1.454,190,0.969,348,1.559,368,2.665,430,4.037,431,3.173,432,2.875,433,3.451]],["title/classes/ControlValueAccessorBase.html",[25,1.271,434,2.859]],["body/classes/ControlValueAccessorBase.html",[3,0.187,4,0.139,5,0.139,7,1.439,12,1.365,18,1.256,23,1.076,24,1.076,25,1.382,27,0.027,32,2.106,33,1.645,38,0.187,39,1.336,77,1.817,78,1.027,79,0.38,80,1.191,81,1.825,82,2.444,90,1.775,91,3.109,93,0.867,94,3.109,107,4.461,131,1.645,134,1.598,154,1.836,165,2.444,171,2.857,180,0.015,181,0.015,182,1.58,190,0.622,221,2.093,226,1.492,228,3.109,303,1.256,321,3.85,342,2.927,349,1.645,362,2.093,390,1.836,434,3.109,435,2.482,436,2.482,437,2.482,438,2.482,439,2.482,440,5.452,441,1.836,442,2.482,443,2.482,444,4.399,445,2.482,446,2.482,447,2.482,448,2.482,449,2.482,450,2.482,451,2.482,452,2.482,453,3.723,454,3.687,455,3.687,456,3.687,457,4.399,458,3.687,459,3.687,460,3.687,461,3.687,462,4.996,463,5.452,464,3.687,465,3.255,466,4.399,467,4.399,468,5.452,469,1.836,470,2.482,471,3.687,472,3.687,473,2.645,474,2.482,475,2.482,476,1.492,477,2.482,478,2.482,479,2.482,480,3.109,481,4.869,482,3.687,483,3.109,484,2.482,485,2.482,486,2.482,487,2.482,488,2.482]],["title/injectables/FocusMonitor.html",[0,1.864,489,2.859]],["body/injectables/FocusMonitor.html",[2,1.448,3,0.216,4,0.16,5,0.16,7,1.513,9,2.711,12,1.574,18,3.296,23,1.241,24,1.241,25,1.073,26,1.721,27,0.027,28,1.897,32,1.924,38,0.216,39,1.242,77,1.924,78,1.088,79,0.361,80,1.261,90,1.921,93,2.32,98,3.999,101,3.449,123,1.897,125,2.413,130,2.118,134,1.241,135,0.932,154,2.118,155,2.413,171,1.448,180,0.016,181,0.016,280,1.448,303,1.448,304,2.413,317,2.413,319,3.452,343,3.999,469,3.027,489,3.449,490,2.118,491,2.118,492,4.025,493,2.118,494,2.118,495,4.544,496,2.118,497,2.118,498,2.862,499,2.862,500,2.862,501,2.862,502,2.862,503,2.862,504,2.862,505,4.091,506,4.091,507,4.091,508,4.774,509,4.091,510,2.07,511,2.862,512,3.532,513,2.862,514,2.862,515,2.862,516,3.027,517,2.862,518,2.862,519,2.862,520,3.532,521,2.862,522,2.862,523,2.862,524,3.164,525,2.862,526,2.413,527,2.862,528,2.862,529,2.118,530,2.862,531,2.862,532,2.862,533,2.413]],["title/interfaces/FocusMonitorData.html",[182,1.03,534,2.859]],["body/interfaces/FocusMonitorData.html",[3,0.363,4,0.269,5,0.269,7,1.269,18,2.431,27,0.025,38,0.363,79,0.377,93,1.678,180,0.023,181,0.023,184,1.459,190,0.971,490,3.555,491,3.555,492,4.051,495,4.557,512,4.257,534,4.051,535,4.805,536,3.555,537,6.526]],["title/components/HeaderComponent.html",[197,0.895,288,1.715]],["body/components/HeaderComponent.html",[3,0.217,4,0.161,5,0.161,27,0.027,38,0.217,78,0.945,79,0.342,81,1.077,82,1.077,93,1.433,119,0.936,121,2.076,135,0.936,149,2.424,171,2.076,180,0.016,181,0.016,197,0.759,198,2.238,199,1.919,200,1.905,201,1.581,202,1.581,204,1.246,205,2.703,206,3.111,207,2.632,208,1.077,209,1.158,210,1.905,211,1.905,213,1.454,214,1.919,217,2.72,218,3.46,223,1.728,230,1.581,234,4.035,238,3.172,239,2.72,240,2.467,243,1.905,244,2.877,247,3.862,248,2.127,249,2.127,250,1.905,251,1.728,252,2.127,253,2.127,254,3.036,255,3.036,256,2.127,257,2.127,258,2.127,264,2.424,267,2.424,270,2.127,271,1.905,272,3.541,276,3.036,277,1.905,279,1.246,280,2.076,281,1.077,282,2.87,283,1.581,284,1.581,285,1.581,286,1.581,287,1.581,288,2.421,289,1.581,290,1.538,291,2.256,292,1.454,293,1.158,294,1.344,295,1.454,296,1.454,297,1.581,298,1.336,299,1.581,300,1.344,301,1.581,371,2.424,372,3.541,373,2.424,374,2.424,375,2.424,376,2.127,377,3.036,380,3.541,381,1.905,395,2.467,397,1.728,398,1.728,409,2.424,476,2.877,538,2.874,539,5.739,540,4.103,541,4.103,542,4.785,543,4.103,544,4.103,545,4.103,546,4.103,547,2.424,548,2.874,549,2.874,550,1.344,551,2.874,552,4.103]],["title/interfaces/IconDefinition.html",[182,1.03,330,1.184]],["body/interfaces/IconDefinition.html",[3,0.354,4,0.262,5,0.262,27,0.026,38,0.354,60,1.671,78,1.203,79,0.399,80,1.297,180,0.022,181,0.022,184,1.423,190,0.957,330,1.637,331,2.125,348,1.526,368,2.641,431,3.107,432,2.849,553,4.194]],["title/modules/IconModule.html",[353,1.864,554,2.247]],["body/modules/IconModule.html",[3,0.312,4,0.232,5,0.232,7,1.093,27,0.025,180,0.021,181,0.021,197,1.093,208,1.967,209,1.667,224,2.454,279,1.794,281,1.551,290,2.519,298,2.158,348,1.348,350,2.095,351,3.883,353,2.886,368,2.275,554,4.394,555,2.276,556,2.489,557,2.743,558,3.063,559,2.743,560,4.264,561,3.49,562,3.49,563,3.49,564,3.883,565,3.063,566,2.743,567,4.139,568,3.49,569,3.49,570,3.063,571,2.489,572,2.276,573,2.743]],["title/injectables/IconService.html",[0,1.864,574,1.864]],["body/injectables/IconService.html",[2,1.299,3,0.194,4,0.144,5,0.144,27,0.027,32,1.843,38,0.194,39,1.148,60,1.69,77,2.123,78,1.2,79,0.423,80,1.391,81,1.978,82,1.978,90,2.031,111,1.701,180,0.015,181,0.015,190,0.638,220,2.506,330,2.123,331,0.962,338,1.543,348,0.836,368,1.945,384,1.299,433,3.172,453,3.985,473,2.698,510,1.299,524,2.974,550,1.2,553,1.899,574,1.412,575,2.567,576,3.188,577,3.188,578,3.188,579,2.506,580,3.281,581,3.188,582,3.188,583,3.188,584,3.188,585,3.188,586,3.188,587,3.188,588,3.188,589,3.188,590,3.188,591,3.188,592,3.32,593,3.784,594,3.188,595,3.784,596,3.188,597,2.165,598,3.188,599,3.188,600,3.188,601,3.188,602,3.188,603,3.188,604,3.188,605,2.165,606,2.165,607,2.165,608,2.165,609,2.165,610,3.188,611,2.165,612,2.165,613,2.165,614,1.412,615,2.165,616,3.188,617,2.165,618,4.174,619,2.165,620,2.165,621,2.165]],["title/injectables/IconService-1.html",[0,1.563,119,0.926,574,1.563]],["body/injectables/IconService-1.html",[2,1.301,3,0.194,4,0.144,5,0.144,27,0.027,32,1.844,38,0.194,39,1.15,60,1.691,77,2.124,78,1.2,79,0.423,80,1.392,81,1.979,82,1.979,90,2.031,111,1.705,180,0.015,181,0.015,190,0.639,220,2.509,330,2.124,331,0.964,338,1.546,368,1.947,384,1.301,433,3.175,453,3.986,473,2.701,510,1.301,524,2.977,550,1.203,553,1.903,574,1.414,576,3.192,577,3.192,578,3.192,579,2.509,580,3.284,581,3.192,582,3.192,583,3.192,584,3.192,585,3.192,586,3.192,587,3.192,588,3.192,589,3.192,590,3.192,591,3.192,592,3.324,593,3.788,594,3.192,595,3.788,596,3.192,597,2.169,598,3.192,599,3.192,600,3.192,601,3.192,602,3.192,603,3.192,604,3.192,605,2.169,606,2.169,607,2.169,608,2.169,609,2.169,610,3.192,611,2.169,612,2.169,613,2.169,614,1.414,615,2.169,616,3.192,617,2.169,618,4.178,619,2.169,620,2.169,621,2.169,622,2.572]],["title/directives/InputDirective.html",[281,1.271,294,1.585]],["body/directives/InputDirective.html",[3,0.275,4,0.204,5,0.204,27,0.027,31,3.594,32,1.273,36,3.074,38,0.275,39,1.468,79,0.355,80,0.834,81,2.45,82,2.47,90,1.187,135,1.765,180,0.019,181,0.019,190,0.816,204,1.58,205,1.58,208,1.366,214,2.26,226,2.906,293,1.468,294,1.705,295,1.845,296,1.845,303,1.845,308,2.697,321,3.576,326,4.075,327,4.075,426,4.075,580,4.332,623,3.074,624,3.646,625,3.646,626,4.833,627,4.833,628,4.833,629,4.833,630,4.833,631,3.074,632,3.074,633,3.074,634,3.074,635,3.646,636,3.646,637,3.646,638,3.646,639,3.646,640,3.074,641,3.646]],["title/interfaces/Manifest.html",[182,1.03,642,2.859]],["body/interfaces/Manifest.html",[3,0.37,4,0.275,5,0.275,27,0.025,38,0.37,60,1.697,79,0.382,180,0.023,181,0.023,184,1.491,190,0.984,348,1.599,384,3.145,431,3.254,642,4.14,643,3.737]],["title/components/NxIconComponent.html",[197,0.895,290,1.271]],["body/components/NxIconComponent.html",[3,0.254,4,0.189,5,0.189,7,0.89,23,1.461,24,1.461,25,1.264,26,2.027,27,0.027,38,0.254,60,1.211,78,1.104,79,0.383,93,1.602,121,2.637,135,1.098,180,0.018,181,0.018,197,1.477,198,2.144,199,2.144,201,1.854,202,1.854,204,1.461,205,2.793,206,2.637,207,1.854,208,1.719,209,1.847,213,2.321,214,2.144,230,1.854,279,1.461,280,2.321,281,1.264,282,3.076,283,1.854,284,1.854,285,1.854,286,1.854,287,1.854,288,1.706,289,1.854,290,2.193,291,2.522,292,1.706,293,1.358,294,1.576,295,1.706,296,1.706,297,1.854,298,1.821,299,1.854,300,1.576,301,1.854,309,2.495,310,2.495,311,2.495,330,1.602,331,1.264,348,1.697,350,2.321,368,2.424,384,1.706,432,2.437,572,1.854,573,2.235,614,2.522,643,2.027,644,3.371,645,2.843,646,2.495,647,2.843,648,2.235,649,3.393,650,4.394,651,2.843,652,2.843]],["title/components/NxIconComponent-1.html",[119,0.926,197,0.751,290,1.066]],["body/components/NxIconComponent-1.html",[3,0.254,4,0.189,5,0.189,7,0.89,23,1.461,24,1.461,25,1.264,26,2.027,27,0.027,38,0.254,60,1.211,78,1.104,79,0.383,93,1.602,119,1.098,121,2.637,135,1.098,180,0.018,181,0.018,197,1.477,198,2.144,199,2.144,201,1.854,202,1.854,204,1.461,205,2.793,206,2.637,207,1.854,208,1.719,209,1.847,213,2.321,214,2.144,230,1.854,279,1.461,280,2.321,281,1.264,282,3.076,283,1.854,284,1.854,285,1.854,286,1.854,287,1.854,288,1.706,289,1.854,290,2.193,291,2.522,292,1.706,293,1.358,294,1.576,295,1.706,296,1.706,297,1.854,298,1.821,299,1.854,300,1.576,301,1.854,309,2.495,310,2.495,311,2.495,330,1.602,331,1.264,348,1.493,350,2.321,368,2.424,384,1.706,432,2.437,572,1.854,573,2.235,614,2.522,643,2.027,645,2.843,646,2.495,647,2.843,648,2.235,649,3.393,650,4.394,651,2.843,652,2.843,653,3.371]],["title/directives/NxIconDirective.html",[281,1.271,298,1.104]],["body/directives/NxIconDirective.html",[3,0.267,4,0.198,5,0.198,27,0.027,32,1.866,38,0.267,39,1.439,60,1.506,77,1.993,78,1.126,79,0.422,80,1.306,90,1.993,135,1.153,180,0.019,181,0.019,204,1.534,205,1.534,208,1.327,214,2.216,293,1.426,298,1.153,300,1.655,303,1.791,305,2.619,318,3.507,330,1.993,331,2.003,338,2.849,340,2.619,341,3.507,342,2.128,343,3.141,348,1.153,432,2.668,433,2.849,453,3.909,510,1.791,550,1.655,574,2.606,579,3.141,654,2.985,655,4.505,656,4.505,657,4.505,658,3.996,659,3.996,660,2.985,661,3.996,662,2.985,663,2.985,664,1.947,665,2.985,666,2.985,667,2.985]],["title/directives/NxIconDirective-1.html",[119,0.926,281,1.066,298,0.926]],["body/directives/NxIconDirective-1.html",[3,0.268,4,0.199,5,0.199,27,0.027,32,1.868,38,0.268,39,1.442,60,1.508,77,1.995,78,1.128,79,0.422,80,1.307,90,1.995,135,1.156,180,0.019,181,0.019,204,1.539,205,1.539,208,1.33,214,2.22,293,1.429,298,1.156,300,1.66,303,1.796,305,2.626,318,3.513,330,1.995,331,2.005,338,2.854,340,2.626,341,3.513,342,2.134,343,3.147,432,2.671,433,2.854,453,3.911,510,1.796,550,1.66,574,2.611,579,3.147,655,4.511,656,4.511,657,4.511,658,4.003,659,4.003,660,2.993,661,4.003,662,2.993,663,2.993,664,1.952,665,2.993,666,2.993,667,2.993,668,2.993]],["title/modules/NxIconModule.html",[353,1.864,669,2.247]],["body/modules/NxIconModule.html",[3,0.314,4,0.233,5,0.233,7,1.1,27,0.025,39,1.265,77,1.454,78,0.822,79,0.273,80,0.953,90,1.356,180,0.021,181,0.021,197,1.1,208,1.975,209,1.677,224,2.464,279,1.805,281,1.561,290,2.398,298,1.977,330,1.84,350,2.107,351,3.898,353,2.897,368,2.284,555,2.29,556,2.504,557,2.76,558,3.082,559,2.76,560,3.898,564,3.898,565,3.082,566,2.76,568,3.512,569,3.512,570,3.082,571,2.504,572,2.29,573,2.76,614,2.29,669,4.307,670,3.512,671,4.165,672,4.165,673,4.165,674,4.165,675,4.165,676,4.165]],["title/interfaces/OverlayConfig.html",[182,1.03,677,2.509]],["body/interfaces/OverlayConfig.html",[3,0.326,4,0.242,5,0.242,7,1.142,27,0.026,38,0.407,64,2.879,79,0.404,80,1.479,93,1.511,134,2.339,165,2.867,180,0.021,181,0.021,184,1.314,187,2.379,190,0.911,399,3.201,677,3.201,678,2.601,679,3.897,680,3.647,681,4.958,682,6.156,683,4.081,684,5.88,685,4.326,686,4.326,687,3.647,688,3.647,689,3.647,690,3.992,691,4.326]],["title/interfaces/OverlayData.html",[182,1.03,692,2.859]],["body/interfaces/OverlayData.html",[3,0.348,4,0.258,5,0.258,7,1.216,27,0.026,38,0.348,79,0.413,98,4.171,107,4.15,180,0.022,181,0.022,184,1.399,190,0.947,536,3.409,571,3.636,678,2.77,679,3.054,692,3.885,693,4.607,694,3.885,695,5.099,696,5.099,697,6.047,698,4.73]],["title/interfaces/OverlayPosition.html",[182,1.03,699,2.509]],["body/interfaces/OverlayPosition.html",[3,0.357,4,0.265,5,0.265,7,1.251,27,0.026,38,0.357,64,2.971,79,0.401,180,0.023,181,0.023,184,1.438,190,0.963,391,3.505,395,3.68,398,3.68,678,2.848,679,3.14,683,4.057,690,4.221,699,3.505,700,3.994]],["title/injectables/OverlayService.html",[0,1.864,701,2.859]],["body/injectables/OverlayService.html",[2,1.486,3,0.222,4,0.164,5,0.164,7,1.469,9,1.947,12,1.615,23,1.273,24,1.273,25,1.101,27,0.027,28,1.947,32,1.943,33,1.947,38,0.365,39,1.265,64,1.373,77,1.84,78,1.04,79,0.345,80,1.206,82,1.562,90,1.882,93,2.121,98,4.242,123,1.947,135,0.956,180,0.017,181,0.017,187,2.291,319,3.21,391,4.69,392,2.477,397,1.766,399,3.083,480,2.477,483,3.513,493,2.173,496,2.173,510,2.108,529,2.173,533,2.477,571,3.168,677,3.899,678,1.766,679,4.095,680,4.083,681,2.477,683,1.947,687,2.477,688,3.513,695,4.874,696,3.513,699,3.583,700,2.477,701,3.513,702,2.477,703,2.937,704,2.937,705,2.937,706,4.843,707,2.937,708,4.167,709,2.937,710,2.937,711,2.937,712,2.937,713,2.937,714,2.937,715,2.937,716,4.167,717,4.167,718,4.843,719,4.843,720,2.937,721,2.937,722,4.167,723,2.937,724,2.937,725,2.937,726,2.937,727,2.937,728,4.167,729,2.937,730,2.477,731,2.173,732,2.477,733,2.937,734,3.513,735,2.937,736,2.937]],["title/components/PageComponent.html",[197,0.895,292,1.715]],["body/components/PageComponent.html",[3,0.146,4,0.108,5,0.108,27,0.027,32,1.318,38,0.146,39,0.927,68,2.022,78,0.745,79,0.127,81,0.726,82,0.726,84,2.573,90,1.229,93,1.066,119,0.631,121,1.544,135,0.631,171,1.544,180,0.012,181,0.012,190,0.515,197,1.52,198,1.427,199,2.002,200,1.285,201,1.066,202,1.066,204,0.84,205,2.447,206,3.26,207,1.066,208,0.726,209,0.781,210,1.285,211,1.285,213,0.981,217,2.837,222,1.434,223,2.269,224,1.427,230,3.428,238,2.501,239,2.501,240,2.269,243,1.285,244,2.799,245,1.434,247,3.828,248,2.258,249,2.258,250,2.837,251,2.799,252,1.434,253,1.434,254,2.258,255,2.258,256,1.434,257,1.434,258,1.434,270,1.434,271,2.501,272,1.434,274,3.609,275,1.634,276,2.258,277,1.285,278,1.634,279,0.84,280,1.544,281,0.726,282,2.354,283,1.066,284,1.066,285,1.066,286,1.066,287,1.066,288,1.544,289,1.066,290,1.144,291,1.678,292,1.91,293,0.781,294,0.906,295,0.981,296,0.981,297,1.066,298,0.994,299,1.066,300,0.906,301,1.066,346,2.573,372,2.792,377,2.792,380,4.177,381,2.022,382,1.634,395,2.799,396,3.167,397,1.834,398,1.165,400,1.634,476,2.269,493,2.258,494,2.258,536,3.966,550,1.427,566,2.022,570,2.258,643,1.165,648,2.022,737,1.938,738,3.051,739,4.944,740,2.573,741,3.051,742,3.051,743,4.28,744,2.573,745,3.051,746,3.051,747,3.051,748,2.573,749,4.28,750,2.573,751,2.573,752,3.051,753,2.573,754,3.051,755,3.051,756,2.258,757,3.051,758,2.573,759,3.051,760,3.051,761,2.573,762,3.051,763,3.051,764,2.573,765,3.051,766,2.573,767,3.051,768,4.28,769,3.051,770,3.051,771,2.573,772,3.051,773,2.573,774,2.573,775,4.944,776,3.051,777,2.573,778,3.051,779,3.051,780,3.051,781,3.774,782,3.774,783,3.774,784,1.634,785,1.938,786,1.634,787,1.938,788,1.938,789,3.774,790,1.938,791,1.938,792,3.774,793,1.938,794,1.938,795,1.938,796,1.938,797,1.938,798,3.774,799,3.051,800,1.938,801,1.938,802,1.938,803,1.938]],["title/interfaces/RenderMeta.html",[182,1.03,664,1.864]],["body/interfaces/RenderMeta.html",[3,0.351,4,0.26,5,0.26,27,0.026,38,0.351,60,1.667,79,0.431,80,1.446,180,0.022,181,0.022,184,1.414,190,0.953,330,1.971,331,2.116,348,1.516,432,2.841,654,3.925,664,2.56,804,5.122]],["title/interfaces/RenderMeta-1.html",[119,0.926,182,0.863,664,1.563]],["body/interfaces/RenderMeta-1.html",[3,0.352,4,0.261,5,0.261,27,0.026,38,0.352,60,1.669,79,0.431,80,1.447,180,0.022,181,0.022,184,1.419,190,0.955,330,1.975,331,2.12,432,2.845,664,2.569,668,3.939,804,5.13]],["title/injectables/ResponsiveUtility.html",[0,1.864,805,2.859]],["body/injectables/ResponsiveUtility.html",[2,1.054,3,0.157,4,0.117,5,0.117,7,1.488,9,1.38,12,1.145,23,1.713,24,0.903,25,0.78,26,1.252,27,0.027,28,1.38,31,1.38,32,1.38,38,0.157,39,0.98,64,1.509,77,1.918,78,1.084,79,0.378,80,1.257,90,2.007,123,2.95,130,3.293,134,1.929,135,1.836,165,2.139,180,0.013,181,0.013,185,1.541,186,5.078,187,2.447,190,0.545,191,1.38,192,2.388,193,1.38,194,1.541,195,1.541,196,1.541,217,1.38,224,0.974,226,1.252,251,1.94,303,1.054,308,1.541,319,2.619,342,1.252,389,1.541,396,3.293,423,2.721,469,4.67,496,1.541,497,1.541,510,1.633,516,1.541,520,3.932,524,3.818,526,3.753,529,1.541,547,2.721,571,1.252,580,3.192,689,2.721,694,1.756,730,1.756,731,1.541,732,1.756,734,1.756,786,3.332,805,2.721,806,1.756,807,2.082,808,5.761,809,2.082,810,2.082,811,2.082,812,2.082,813,2.082,814,2.082,815,3.753,816,3.227,817,3.227,818,3.951,819,3.951,820,3.951,821,3.951,822,3.227,823,3.227,824,3.227,825,3.227,826,3.227,827,3.227,828,3.227,829,3.227,830,2.082,831,4.815,832,2.082,833,2.082,834,2.082,835,3.227,836,3.227,837,3.951,838,3.227,839,3.951,840,2.082,841,3.227,842,2.082,843,2.082,844,3.227,845,2.082,846,2.082,847,2.082,848,2.082,849,2.082,850,3.951,851,1.756,852,2.082,853,2.082,854,3.951,855,2.082,856,2.082,857,2.082,858,2.082,859,3.951,860,2.082,861,2.082,862,2.082,863,2.082]],["title/interfaces/TestConfig.html",[182,1.03,864,2.859]],["body/interfaces/TestConfig.html",[3,0.334,4,0.248,5,0.248,7,1.168,27,0.026,38,0.334,79,0.418,80,1.545,134,2.372,180,0.022,181,0.022,184,1.344,187,2.434,190,0.924,209,2.393,441,3.274,557,3.937,559,3.937,864,3.731,865,4.425,866,4.425,867,4.614,868,4.425,869,3.274,870,5.941,871,5.941]],["title/interfaces/User.html",[182,1.03,476,2.038]],["body/interfaces/User.html",[3,0.382,4,0.283,5,0.283,27,0.025,38,0.382,60,1.566,78,1.242,79,0.332,180,0.023,181,0.023,184,1.536,190,1.001,476,3.041,872,5.058]],["title/contributing.html",[873,3.881]],["body/contributing.html",[4,0.083,5,0.083,7,1.328,10,4.484,11,1.252,12,0.816,14,2.074,15,2.074,16,1.82,17,2.074,18,1.853,20,1.82,21,1.82,23,1.588,24,1.066,25,0.556,27,0.027,33,1.63,39,0.451,64,0.694,68,0.984,77,0.859,78,0.293,79,0.24,81,1.522,82,0.556,119,0.483,120,1.098,131,0.984,133,1.252,134,0.644,175,1.82,179,2.655,180,0.01,181,0.01,182,0.451,184,0.747,187,0.816,190,0.415,197,1.612,199,2.167,206,0.751,213,1.245,216,0.984,223,1.479,224,2.541,240,1.479,348,1.025,349,2.087,350,1.853,352,2.074,363,2.655,376,1.82,389,1.82,390,1.098,393,1.252,417,2.074,441,1.098,462,2.074,465,1.098,473,0.893,494,1.098,497,1.82,516,1.82,520,1.82,572,2.406,592,1.098,640,1.252,648,0.984,698,3.088,731,1.098,744,1.252,748,1.252,751,1.252,753,3.69,756,2.33,758,3.423,761,1.252,764,1.252,766,3.69,774,1.252,777,2.074,784,1.252,815,1.252,851,1.252,867,1.252,869,1.098,873,2.655,874,2.46,875,1.485,876,1.485,877,4.376,878,2.46,879,6.306,880,4.06,881,3.663,882,1.485,883,1.485,884,2.46,885,1.485,886,1.485,887,4.634,888,1.485,889,4.848,890,4.634,891,1.485,892,1.485,893,5.537,894,3.149,895,4.06,896,1.485,897,2.46,898,1.485,899,1.485,900,1.485,901,1.485,902,1.485,903,4.376,904,4.06,905,4.06,906,1.485,907,1.485,908,1.252,909,2.46,910,3.149,911,2.33,912,2.46,913,1.485,914,3.149,915,2.46,916,1.485,917,3.149,918,1.485,919,3.663,920,2.46,921,1.252,922,2.46,923,1.485,924,1.485,925,2.46,926,1.485,927,1.485,928,1.485,929,1.485,930,2.074,931,1.485,932,2.46,933,3.149,934,1.485,935,1.485,936,1.485,937,1.485,938,2.46,939,1.485,940,1.252,941,3.149,942,1.485,943,2.46,944,2.46,945,1.485,946,3.663,947,4.06,948,2.46,949,1.485,950,3.149,951,1.485,952,2.46,953,3.149,954,1.485,955,3.149,956,3.149,957,3.663,958,4.376,959,2.46,960,1.485,961,2.46,962,1.485,963,1.485,964,1.485,965,3.663,966,1.485,967,1.485,968,2.46,969,4.376,970,2.46,971,1.485,972,1.485,973,1.485,974,1.485,975,2.46,976,2.46,977,1.485,978,1.485,979,1.485,980,1.485,981,1.485,982,1.485,983,1.485,984,3.149,985,3.663,986,2.46,987,2.46,988,3.149,989,2.46,990,1.485,991,1.485,992,1.485,993,1.485,994,4.06,995,1.485,996,1.485,997,2.46,998,1.485,999,1.485,1000,1.485,1001,1.485,1002,2.46,1003,1.485,1004,1.485,1005,1.485,1006,1.485,1007,1.485,1008,3.149,1009,1.485,1010,2.46,1011,1.485,1012,1.485,1013,1.485,1014,1.485,1015,1.485,1016,1.485,1017,1.485,1018,1.485,1019,1.485,1020,1.485,1021,1.485,1022,1.485,1023,1.485,1024,2.46,1025,1.485,1026,1.485,1027,2.074,1028,2.46,1029,1.485,1030,1.485,1031,1.485,1032,3.149,1033,1.485,1034,1.485,1035,1.485,1036,1.485,1037,1.485,1038,1.485,1039,1.485,1040,1.485,1041,2.46,1042,1.485,1043,1.485,1044,2.46,1045,1.485,1046,1.485,1047,1.485,1048,1.485,1049,1.485,1050,1.485,1051,1.485,1052,1.485,1053,1.485,1054,1.485,1055,1.485,1056,1.485]],["title/dependencies.html",[556,2.448,1057,2.397]],["body/dependencies.html",[27,0.027,180,0.022,181,0.022,550,2.162,556,2.779,1058,4.623,1059,6.706,1060,4.623,1061,4.623,1062,4.623,1063,4.623,1064,5.621,1065,4.739,1066,4.623,1067,4.623,1068,4.623,1069,4.623,1070,4.623,1071,4.623,1072,4.623,1073,4.623,1074,4.623,1075,4.623]],["title/index.html",[38,0.256,1076,3.39]],["body/index.html",[4,0.223,23,2.456,24,1.73,25,1.496,27,0.027,68,2.646,180,0.02,181,0.02,197,1.496,209,1.608,224,1.867,348,2.014,349,3.755,350,2.595,465,3.794,473,2.4,555,2.82,572,2.195,614,2.195,646,2.954,649,4.424,740,3.366,750,3.366,756,2.954,771,3.366,773,3.366,908,3.366,1027,3.366,1077,3.992,1078,3.992,1079,5.128,1080,3.992,1081,3.992,1082,5.128,1083,5.665,1084,3.992,1085,3.992,1086,3.992,1087,3.992,1088,3.992,1089,3.992,1090,5.128,1091,5.128,1092,3.992,1093,3.992,1094,5.128,1095,3.992,1096,3.992,1097,3.992,1098,3.992,1099,5.128,1100,3.992,1101,3.992,1102,3.992]],["title/modules.html",[555,2.531]],["body/modules.html",[27,0.024,180,0.024,181,0.024,550,2.804,554,3.416,555,2.835,669,3.416,930,5.056,1065,5.056,1103,5.997]],["title/overview.html",[911,3.406]],["body/overview.html",[2,2.161,25,1.601,27,0.026,119,1.391,120,3.16,180,0.021,181,0.021,184,1.297,199,1.997,244,2.568,279,1.851,290,2.477,293,1.72,298,2.151,353,2.349,554,4.379,555,2.349,556,2.568,557,2.831,558,3.16,559,2.831,560,3.16,561,3.601,562,3.601,563,3.601,564,3.96,565,3.16,566,2.831,669,4.268,670,3.601,911,3.16,921,3.601,940,4.513,1104,4.271]],["title/properties.html",[190,0.687,1057,2.397]],["body/properties.html",[27,0.025,180,0.024,181,0.024,190,0.894,1105,5.297,1106,5.297]],["title/routes.html",[1107,3.881]],["body/routes.html",[27,0.024,180,0.024,181,0.024,1107,4.52]],["title/miscellaneous/typealiases.html",[1108,2.397,1109,4.071]],["body/miscellaneous/typealiases.html",[5,0.342,6,2.74,16,2.404,18,1.644,20,2.404,21,2.404,22,2.74,27,0.028,38,0.245,60,0.858,61,2.74,62,3.77,69,2.74,70,2.74,76,2.74,79,0.213,81,1.676,83,2.74,131,2.154,158,2.74,171,2.587,180,0.018,181,0.018,185,2.404,186,3.783,191,2.154,192,2.404,193,2.154,194,2.404,195,2.404,196,2.404,216,2.154,231,3.77,233,3.77,261,2.404,302,2.74,320,2.74,322,2.74,331,1.676,332,3.77,333,3.77,334,3.77,348,1.058,381,2.154,383,2.74,384,2.263,385,2.74,386,2.74,388,2.74,395,1.953,397,1.953,398,1.953,431,2.154,490,2.404,491,3.309,495,2.404,512,3.309,623,2.74,631,3.77,632,3.77,633,3.77,634,2.74,643,1.953,678,1.953,683,2.154,690,3.309,702,2.74,806,2.74,869,2.404,1108,2.74,1110,3.249,1111,3.249,1112,3.249,1113,3.249,1114,5.113,1115,5.113,1116,3.249,1117,3.249,1118,3.249,1119,3.249,1120,3.249,1121,3.249,1122,3.249,1123,3.249,1124,3.249,1125,3.249,1126,3.249,1127,3.249,1128,3.249,1129,3.249,1130,3.249,1131,3.249,1132,3.249,1133,3.249,1134,3.249,1135,3.249,1136,3.249]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":244,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["0.0.0",{"_index":1106,"title":{},"body":{"properties.html":{}}}],["0.01px",{"_index":419,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["0.1",{"_index":548,"title":{},"body":{"components/HeaderComponent.html":{}}}],["0.15",{"_index":265,"title":{},"body":{"components/ButtonComponent.html":{}}}],["0.15.0",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["0.2s",{"_index":404,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["0.35",{"_index":402,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["0.6s",{"_index":413,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["0px",{"_index":266,"title":{},"body":{"components/ButtonComponent.html":{}}}],["1",{"_index":119,"title":{"components/ButtonComponent-1.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta-1.html":{}},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"contributing.html":{},"overview.html":{}}}],["100",{"_index":428,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["10px",{"_index":272,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["11px",{"_index":275,"title":{},"body":{"components/ButtonComponent.html":{},"components/PageComponent.html":{}}}],["12",{"_index":1104,"title":{},"body":{"overview.html":{}}}],["12.0.0",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["12px",{"_index":274,"title":{},"body":{"components/ButtonComponent.html":{},"components/PageComponent.html":{}}}],["13px",{"_index":800,"title":{},"body":{"components/PageComponent.html":{}}}],["14px",{"_index":277,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["15px",{"_index":549,"title":{},"body":{"components/HeaderComponent.html":{}}}],["16px",{"_index":273,"title":{},"body":{"components/ButtonComponent.html":{}}}],["1ea7fd",{"_index":803,"title":{},"body":{"components/PageComponent.html":{}}}],["1em",{"_index":792,"title":{},"body":{"components/PageComponent.html":{}}}],["1px",{"_index":267,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{}}}],["2",{"_index":120,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{},"overview.html":{}}}],["2.3.0",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["20.1.7",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["20px",{"_index":276,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["24px",{"_index":278,"title":{},"body":{"components/ButtonComponent.html":{},"components/PageComponent.html":{}}}],["2px",{"_index":408,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["3",{"_index":921,"title":{},"body":{"contributing.html":{},"overview.html":{}}}],["30px",{"_index":794,"title":{},"body":{"components/PageComponent.html":{}}}],["32px",{"_index":790,"title":{},"body":{"components/PageComponent.html":{}}}],["333",{"_index":270,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["357a14",{"_index":797,"title":{},"body":{"components/PageComponent.html":{}}}],["3em",{"_index":246,"title":{},"body":{"components/ButtonComponent.html":{}}}],["3px",{"_index":801,"title":{},"body":{"components/PageComponent.html":{}}}],["4",{"_index":928,"title":{},"body":{"contributing.html":{}}}],["40px",{"_index":799,"title":{},"body":{"components/PageComponent.html":{}}}],["48px",{"_index":785,"title":{},"body":{"components/PageComponent.html":{}}}],["4px",{"_index":789,"title":{},"body":{"components/PageComponent.html":{}}}],["5",{"_index":934,"title":{},"body":{"contributing.html":{}}}],["50",{"_index":411,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["5000",{"_index":86,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["555ab9",{"_index":259,"title":{},"body":{"components/ButtonComponent.html":{}}}],["6",{"_index":940,"title":{},"body":{"contributing.html":{},"overview.html":{}}}],["600px",{"_index":787,"title":{},"body":{"components/PageComponent.html":{}}}],["6px",{"_index":552,"title":{},"body":{"components/HeaderComponent.html":{}}}],["7",{"_index":945,"title":{},"body":{"contributing.html":{}}}],["7.8.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":249,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["8",{"_index":951,"title":{},"body":{"contributing.html":{}}}],["8px",{"_index":382,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/PageComponent.html":{}}}],["_assetsurlroot",{"_index":576,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_changeicon",{"_index":655,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_clearsvgelement",{"_index":656,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_createsvgelementfromstring",{"_index":584,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_createsvgelementfromstring(str",{"_index":606,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_document",{"_index":601,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_elementref",{"_index":661,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_getselfrendermeta",{"_index":657,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_handler",{"_index":599,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_http",{"_index":577,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_iconservice",{"_index":662,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_inprogressfetches",{"_index":578,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadicondynamically",{"_index":585,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadicondynamically(type",{"_index":608,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadicondynamicallywithjsonp",{"_index":586,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadicondynamicallywithjsonp(icon",{"_index":609,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadsvgfromcacheorcreatenew",{"_index":587,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_loadsvgfromcacheorcreatenew(icon",{"_index":611,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_nxicons",{"_index":604,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_parseicontype",{"_index":658,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_parseicontype(type",{"_index":665,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_renderer",{"_index":579,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_rendererfactory",{"_index":605,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_setsvgattribute",{"_index":588,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_setsvgattribute(svg",{"_index":612,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_setsvgelement",{"_index":659,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_setsvgelement(svg",{"_index":667,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["_svgdefinitions",{"_index":581,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["_svgrendereddefinitions",{"_index":582,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["a.#{$btn",{"_index":418,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["a11y",{"_index":29,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.announce('error",{"_index":74,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.announce('item",{"_index":71,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.createfocustrap(modalelement",{"_index":105,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.generateuniqueid('input",{"_index":118,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.setariadescribedby(inputelement",{"_index":156,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.setariaexpanded(dropdownbutton",{"_index":163,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.setariahidden(decorativeicon",{"_index":168,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.setarialabel(closebutton",{"_index":172,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11y.setarialabelledby(modalelement",{"_index":177,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["a11yutility",{"_index":1,"title":{"injectables/A11yUtility.html":{}},"body":{"injectables/A11yUtility.html":{}}}],["a[nx",{"_index":286,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["absolute",{"_index":394,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["abstract",{"_index":438,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["accessibility",{"_index":10,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["accessible",{"_index":989,"title":{},"body":{"contributing.html":{}}}],["accessor",{"_index":436,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["accessors",{"_index":220,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["accurate",{"_index":996,"title":{},"body":{"contributing.html":{}}}],["acme",{"_index":541,"title":{},"body":{"components/HeaderComponent.html":{}}}],["action",{"_index":229,"title":{},"body":{"components/ButtonComponent.html":{}}}],["active",{"_index":423,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/ResponsiveUtility.html":{}}}],["actual_component",{"_index":301,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["add",{"_index":1093,"title":{},"body":{"index.html":{}}}],["added",{"_index":72,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["addicon",{"_index":589,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["addicon(icons",{"_index":613,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["addiconliteral",{"_index":590,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["addiconliteral(type",{"_index":615,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["addon",{"_index":779,"title":{},"body":{"components/PageComponent.html":{}}}],["adjust",{"_index":776,"title":{},"body":{"components/PageComponent.html":{}}}],["advanced",{"_index":942,"title":{},"body":{"contributing.html":{}}}],["advantage",{"_index":1086,"title":{},"body":{"index.html":{}}}],["aftercontentinit",{"_index":307,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["afterviewinit",{"_index":306,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["aliases",{"_index":1110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":372,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["alignment",{"_index":369,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["allowed",{"_index":421,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["allows",{"_index":1084,"title":{},"body":{"index.html":{}}}],["alternative",{"_index":922,"title":{},"body":{"contributing.html":{}}}],["alternatives",{"_index":926,"title":{},"body":{"contributing.html":{}}}],["anchor",{"_index":416,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["angular",{"_index":465,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"contributing.html":{},"index.html":{}}}],["angular/animations",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["angular/cli",{"_index":1082,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["animation",{"_index":366,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["announce",{"_index":40,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["announce(message",{"_index":59,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["announcement",{"_index":85,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["announcements",{"_index":22,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["announces",{"_index":65,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["another",{"_index":978,"title":{},"body":{"contributing.html":{}}}],["anti",{"_index":924,"title":{},"body":{"contributing.html":{}}}],["api",{"_index":946,"title":{},"body":{"contributing.html":{}}}],["app",{"_index":570,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{}}}],["app.module.ts",{"_index":1097,"title":{},"body":{"index.html":{}}}],["application",{"_index":861,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["applies",{"_index":721,"title":{},"body":{"injectables/OverlayService.html":{}}}],["apply",{"_index":723,"title":{},"body":{"injectables/OverlayService.html":{}}}],["applyposition",{"_index":716,"title":{},"body":{"injectables/OverlayService.html":{}}}],["applyposition(overlayelement",{"_index":720,"title":{},"body":{"injectables/OverlayService.html":{}}}],["appmodule",{"_index":1102,"title":{},"body":{"index.html":{}}}],["appropriate",{"_index":918,"title":{},"body":{"contributing.html":{}}}],["approval",{"_index":991,"title":{},"body":{"contributing.html":{}}}],["approved",{"_index":992,"title":{},"body":{"contributing.html":{}}}],["args",{"_index":764,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["argstable",{"_index":970,"title":{},"body":{"contributing.html":{}}}],["argtypes",{"_index":965,"title":{},"body":{"contributing.html":{}}}],["aria",{"_index":14,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["arial",{"_index":257,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["ariapoliteness",{"_index":62,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":127,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["arrow",{"_index":137,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["arrowdown",{"_index":132,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["arrowleft",{"_index":139,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["arrowright",{"_index":141,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["arrowup",{"_index":143,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["ask",{"_index":1049,"title":{},"body":{"contributing.html":{}}}],["assemble",{"_index":767,"title":{},"body":{"components/PageComponent.html":{}}}],["assertive",{"_index":76,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["atomic",{"_index":746,"title":{},"body":{"components/PageComponent.html":{}}}],["attribute",{"_index":155,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{}}}],["attributes",{"_index":15,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["auto",{"_index":784,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["autodetectchanges",{"_index":870,"title":{},"body":{"interfaces/TestConfig.html":{}}}],["autodocs",{"_index":968,"title":{},"body":{"contributing.html":{}}}],["automatic",{"_index":706,"title":{},"body":{"injectables/OverlayService.html":{}}}],["automatically",{"_index":685,"title":{},"body":{"interfaces/OverlayConfig.html":{}}}],["autoreposition",{"_index":681,"title":{},"body":{"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["available",{"_index":729,"title":{},"body":{"injectables/OverlayService.html":{}}}],["avoid",{"_index":352,"title":{},"body":{"components/ButtonComponent-1.html":{},"contributing.html":{}}}],["background",{"_index":222,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/PageComponent.html":{}}}],["backgroundcolor",{"_index":215,"title":{},"body":{"components/ButtonComponent.html":{}}}],["base",{"_index":362,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{}}}],["base.ts",{"_index":437,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["basic",{"_index":941,"title":{},"body":{"contributing.html":{}}}],["becomes",{"_index":852,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["before",{"_index":393,"title":{},"body":{"components/ButtonComponent-1.html":{},"contributing.html":{}}}],["best",{"_index":904,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":923,"title":{},"body":{"contributing.html":{}}}],["between",{"_index":547,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["block",{"_index":240,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["blocks",{"_index":1026,"title":{},"body":{"contributing.html":{}}}],["boolean",{"_index":134,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/OverlayConfig.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"contributing.html":{}}}],["booleanattribute",{"_index":630,"title":{},"body":{"directives/InputDirective.html":{}}}],["bootstrap",{"_index":558,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"overview.html":{}}}],["border",{"_index":243,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["borderless",{"_index":1128,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bottom",{"_index":397,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["bottomend",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bottomstart",{"_index":1133,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["box",{"_index":262,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}}}],["breakpoint",{"_index":186,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["breakpointconfig",{"_index":183,"title":{"interfaces/BreakpointConfig.html":{}},"body":{"interfaces/BreakpointConfig.html":{}}}],["breakpoints",{"_index":835,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["brief",{"_index":912,"title":{},"body":{"contributing.html":{}}}],["broken",{"_index":1037,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":1103,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1065,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["btn",{"_index":360,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["build",{"_index":752,"title":{},"body":{"components/PageComponent.html":{}}}],["building",{"_index":741,"title":{},"body":{"components/PageComponent.html":{}}}],["button",{"_index":207,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["button'},{'name",{"_index":284,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["button.css",{"_index":212,"title":{},"body":{"components/ButtonComponent.html":{}}}],["button[nx",{"_index":285,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["button]'},{'name",{"_index":287,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["buttoncomponent",{"_index":198,"title":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["cachedicondefinition",{"_index":430,"title":{"interfaces/CachedIconDefinition.html":{}},"body":{"interfaces/CachedIconDefinition.html":{}}}],["calculated",{"_index":722,"title":{},"body":{"injectables/OverlayService.html":{}}}],["calculateposition",{"_index":717,"title":{},"body":{"injectables/OverlayService.html":{}}}],["calculateposition(triggerelement",{"_index":724,"title":{},"body":{"injectables/OverlayService.html":{}}}],["calculates",{"_index":725,"title":{},"body":{"injectables/OverlayService.html":{}}}],["call",{"_index":228,"title":{},"body":{"components/ButtonComponent.html":{},"classes/ControlValueAccessorBase.html":{}}}],["callback",{"_index":463,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["called",{"_index":94,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{}}}],["canvas",{"_index":777,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["capabilities",{"_index":916,"title":{},"body":{"contributing.html":{}}}],["cart",{"_index":73,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["cases",{"_index":903,"title":{},"body":{"contributing.html":{}}}],["cd",{"_index":1092,"title":{},"body":{"index.html":{}}}],["center",{"_index":374,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{}}}],["centered",{"_index":964,"title":{},"body":{"contributing.html":{}}}],["changeassetssource",{"_index":591,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["changeassetssource(prefix",{"_index":617,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["changes",{"_index":342,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"injectables/ResponsiveUtility.html":{}}}],["check",{"_index":516,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["checks",{"_index":130,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{}}}],["child",{"_index":765,"title":{},"body":{"components/PageComponent.html":{}}}],["circle",{"_index":388,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["clarity",{"_index":982,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":25,"title":{"classes/ControlValueAccessorBase.html":{}},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":221,"title":{},"body":{"components/ButtonComponent.html":{},"classes/ControlValueAccessorBase.html":{}}}],["clean",{"_index":528,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["cleans",{"_index":730,"title":{},"body":{"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["cleanup",{"_index":41,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["clear",{"_index":592,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{},"contributing.html":{}}}],["click",{"_index":235,"title":{},"body":{"components/ButtonComponent.html":{}}}],["close",{"_index":173,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["cls",{"_index":361,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["cluster_iconmodule",{"_index":561,"title":{},"body":{"modules/IconModule.html":{},"overview.html":{}}}],["cluster_iconmodule_exports",{"_index":563,"title":{},"body":{"modules/IconModule.html":{},"overview.html":{}}}],["cluster_iconmodule_imports",{"_index":562,"title":{},"body":{"modules/IconModule.html":{},"overview.html":{}}}],["cluster_nxiconmodule",{"_index":670,"title":{},"body":{"modules/NxIconModule.html":{},"overview.html":{}}}],["cluster_nxiconmodule_imports",{"_index":671,"title":{},"body":{"modules/NxIconModule.html":{}}}],["code",{"_index":955,"title":{},"body":{"contributing.html":{}}}],["codebase",{"_index":1047,"title":{},"body":{"contributing.html":{}}}],["collision",{"_index":687,"title":{},"body":{"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["color",{"_index":223,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["combinations",{"_index":954,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":919,"title":{},"body":{"contributing.html":{}}}],["commonmodule",{"_index":210,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["compatibility",{"_index":931,"title":{},"body":{"contributing.html":{}}}],["compile",{"_index":999,"title":{},"body":{"contributing.html":{}}}],["complete",{"_index":948,"title":{},"body":{"contributing.html":{}}}],["completeness",{"_index":983,"title":{},"body":{"contributing.html":{}}}],["complex",{"_index":897,"title":{},"body":{"contributing.html":{}}}],["compliance",{"_index":933,"title":{},"body":{"contributing.html":{}}}],["compodoc",{"_index":1040,"title":{},"body":{"contributing.html":{}}}],["component",{"_index":197,"title":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"contributing.html":{},"index.html":{}}}],["component's",{"_index":913,"title":{},"body":{"contributing.html":{}}}],["component.mdx",{"_index":1012,"title":{},"body":{"contributing.html":{}}}],["component.stories",{"_index":973,"title":{},"body":{"contributing.html":{}}}],["component.stories.ts",{"_index":1011,"title":{},"body":{"contributing.html":{}}}],["component_template",{"_index":283,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["components",{"_index":199,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"contributing.html":{},"overview.html":{}}}],["components/componentname",{"_index":1023,"title":{},"body":{"contributing.html":{}}}],["components/yourcomponent",{"_index":963,"title":{},"body":{"contributing.html":{}}}],["compose",{"_index":762,"title":{},"body":{"components/PageComponent.html":{}}}],["comprehensive",{"_index":902,"title":{},"body":{"contributing.html":{}}}],["concise",{"_index":995,"title":{},"body":{"contributing.html":{}}}],["config",{"_index":571,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayData.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["configuration",{"_index":187,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"contributing.html":{}}}],["conflicts",{"_index":355,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["connected",{"_index":760,"title":{},"body":{"components/PageComponent.html":{}}}],["consider",{"_index":927,"title":{},"body":{"contributing.html":{}}}],["considerations",{"_index":936,"title":{},"body":{"contributing.html":{}}}],["console.log('current",{"_index":811,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["console.log('element",{"_index":501,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["const",{"_index":33,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/OverlayService.html":{},"contributing.html":{}}}],["constructor",{"_index":510,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["constructor(_iconservice",{"_index":660,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["constructor(_rendererfactory",{"_index":597,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["consult",{"_index":1048,"title":{},"body":{"contributing.html":{}}}],["container",{"_index":126,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["content",{"_index":376,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"contributing.html":{}}}],["contentchild(nxicondirective",{"_index":345,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["contents",{"_index":225,"title":{},"body":{"components/ButtonComponent.html":{}}}],["contrast",{"_index":932,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":873,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["control",{"_index":462,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"contributing.html":{}}}],["control's",{"_index":472,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["controldisabled",{"_index":626,"title":{},"body":{"directives/InputDirective.html":{}}}],["controls",{"_index":895,"title":{},"body":{"contributing.html":{}}}],["controlvalueaccessor",{"_index":440,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["controlvalueaccessorbase",{"_index":434,"title":{"classes/ControlValueAccessorBase.html":{}},"body":{"classes/ControlValueAccessorBase.html":{}}}],["coordinates",{"_index":700,"title":{},"body":{"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{}}}],["correctly",{"_index":988,"title":{},"body":{"contributing.html":{}}}],["covers",{"_index":883,"title":{},"body":{"contributing.html":{}}}],["create",{"_index":885,"title":{},"body":{"contributing.html":{}}}],["createfocustrap",{"_index":42,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["createfocustrap(element",{"_index":97,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["creates",{"_index":99,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["creating",{"_index":113,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["creation",{"_index":907,"title":{},"body":{"contributing.html":{}}}],["current",{"_index":469,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{}}}],["currentbreakpoint",{"_index":816,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["currentcolor",{"_index":410,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["currently",{"_index":519,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["cursor",{"_index":241,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}}}],["custominputcomponent",{"_index":445,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["customize",{"_index":860,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["cva",{"_index":443,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["danger",{"_index":320,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["dashed",{"_index":383,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":536,"title":{},"body":{"interfaces/FocusMonitorData.html":{},"interfaces/OverlayData.html":{},"components/PageComponent.html":{}}}],["declarations",{"_index":557,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"interfaces/TestConfig.html":{},"overview.html":{}}}],["decorators",{"_index":344,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["default",{"_index":81,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"components/HeaderComponent.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"components/PageComponent.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["defaults",{"_index":863,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["defaulttheme",{"_index":583,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["define",{"_index":966,"title":{},"body":{"contributing.html":{}}}],["definitions",{"_index":1030,"title":{},"body":{"contributing.html":{}}}],["dependencies",{"_index":556,"title":{"dependencies.html":{}},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":568,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{}}}],["descendants",{"_index":521,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["described",{"_index":1007,"title":{},"body":{"contributing.html":{}}}],["describedby",{"_index":116,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["describes",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["description",{"_index":7,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"contributing.html":{}}}],["descriptions",{"_index":997,"title":{},"body":{"contributing.html":{}}}],["design",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["desktop",{"_index":814,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["destroy",{"_index":732,"title":{},"body":{"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["destroyed",{"_index":530,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["detailed",{"_index":900,"title":{},"body":{"contributing.html":{}}}],["detection",{"_index":496,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["development",{"_index":771,"title":{},"body":{"components/PageComponent.html":{},"index.html":{}}}],["dialog",{"_index":174,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["directive",{"_index":281,"title":{"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{}}}],["directives",{"_index":293,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["directly",{"_index":573,"title":{},"body":{"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{}}}],["disable",{"_index":424,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["disabled",{"_index":321,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"directives/InputDirective.html":{}}}],["disabledynamicloading",{"_index":596,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["discussions",{"_index":1052,"title":{},"body":{"contributing.html":{}}}],["display",{"_index":238,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["docreateaccount",{"_index":781,"title":{},"body":{"components/PageComponent.html":{}}}],["docs",{"_index":774,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["document",{"_index":876,"title":{},"body":{"contributing.html":{}}}],["documentation",{"_index":879,"title":{},"body":{"contributing.html":{}}}],["documented",{"_index":985,"title":{},"body":{"contributing.html":{}}}],["dologin",{"_index":782,"title":{},"body":{"components/PageComponent.html":{}}}],["dologout",{"_index":783,"title":{},"body":{"components/PageComponent.html":{}}}],["dom",{"_index":201,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["domsanitizer",{"_index":603,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["driven",{"_index":743,"title":{},"body":{"components/PageComponent.html":{}}}],["dropdowncomponent",{"_index":709,"title":{},"body":{"injectables/OverlayService.html":{}}}],["dropdowns",{"_index":703,"title":{},"body":{"injectables/OverlayService.html":{}}}],["duration",{"_index":63,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["dynamic",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["e7fdd8",{"_index":796,"title":{},"body":{"components/PageComponent.html":{}}}],["easier",{"_index":646,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"index.html":{}}}],["easy",{"_index":751,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["ecosystem",{"_index":1087,"title":{},"body":{"index.html":{}}}],["element",{"_index":93,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{}}}],["elementref",{"_index":343,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["elements",{"_index":125,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{}}}],["emit",{"_index":471,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["emitchange",{"_index":456,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["emitchange(value",{"_index":470,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["emits",{"_index":526,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{}}}],["encapsulation",{"_index":309,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["ending",{"_index":747,"title":{},"body":{"components/PageComponent.html":{}}}],["ensure",{"_index":975,"title":{},"body":{"contributing.html":{}}}],["ensures",{"_index":102,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["enter",{"_index":145,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["equal",{"_index":844,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["error",{"_index":158,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["errors",{"_index":1001,"title":{},"body":{"contributing.html":{}}}],["escape",{"_index":147,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["etc",{"_index":117,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["event",{"_index":131,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["event.target",{"_index":448,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["eventemitter",{"_index":234,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{}}}],["events",{"_index":405,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["everyone",{"_index":1056,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":23,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{},"index.html":{}}}],["exampleprop",{"_index":967,"title":{},"body":{"contributing.html":{}}}],["examples",{"_index":893,"title":{},"body":{"contributing.html":{}}}],["existing",{"_index":1046,"title":{},"body":{"contributing.html":{}}}],["expanded",{"_index":162,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["explained",{"_index":1005,"title":{},"body":{"contributing.html":{}}}],["explanations",{"_index":901,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":24,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{},"index.html":{}}}],["exportas",{"_index":624,"title":{},"body":{"directives/InputDirective.html":{}}}],["exports",{"_index":560,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"overview.html":{}}}],["extends",{"_index":446,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["extensive",{"_index":898,"title":{},"body":{"contributing.html":{}}}],["falls",{"_index":833,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["false",{"_index":226,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"directives/InputDirective.html":{},"injectables/ResponsiveUtility.html":{}}}],["family",{"_index":252,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["feature",{"_index":1098,"title":{},"body":{"index.html":{}}}],["features",{"_index":11,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["file",{"_index":4,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"index.html":{}}}],["fill",{"_index":643,"title":{},"body":{"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["filled",{"_index":1127,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["final",{"_index":990,"title":{},"body":{"contributing.html":{}}}],["finaldisabled",{"_index":627,"title":{},"body":{"directives/InputDirective.html":{}}}],["fix",{"_index":364,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["flex",{"_index":371,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{}}}],["fn",{"_index":482,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["focus",{"_index":18,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["focusable",{"_index":124,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["focused",{"_index":502,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["focuses",{"_index":513,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["focusmonitor",{"_index":489,"title":{"injectables/FocusMonitor.html":{}},"body":{"injectables/FocusMonitor.html":{}}}],["focusmonitordata",{"_index":534,"title":{"interfaces/FocusMonitorData.html":{}},"body":{"interfaces/FocusMonitorData.html":{}}}],["focusorigin",{"_index":512,"title":{},"body":{"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"miscellaneous/typealiases.html":{}}}],["focusvia",{"_index":505,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["focusvia(element",{"_index":511,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["following",{"_index":910,"title":{},"body":{"contributing.html":{}}}],["follows",{"_index":976,"title":{},"body":{"contributing.html":{}}}],["font",{"_index":247,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["format",{"_index":956,"title":{},"body":{"contributing.html":{}}}],["formatting",{"_index":1036,"title":{},"body":{"contributing.html":{}}}],["forms",{"_index":466,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["forroot",{"_index":674,"title":{},"body":{"modules/NxIconModule.html":{}}}],["forroot(icons",{"_index":675,"title":{},"body":{"modules/NxIconModule.html":{}}}],["fully",{"_index":1004,"title":{},"body":{"contributing.html":{}}}],["function",{"_index":107,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"interfaces/OverlayData.html":{}}}],["functional",{"_index":1002,"title":{},"body":{"contributing.html":{}}}],["functionality",{"_index":915,"title":{},"body":{"contributing.html":{}}}],["generated",{"_index":896,"title":{},"body":{"contributing.html":{}}}],["generates",{"_index":109,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["generateuniqueid",{"_index":43,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["generateuniqueid(prefix",{"_index":108,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["getbreakpointconfig",{"_index":818,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["getcachedicons",{"_index":593,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["getclasses",{"_index":237,"title":{},"body":{"components/ButtonComponent.html":{}}}],["getcurrentbreakpoint",{"_index":819,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["getdisabledynamicloading",{"_index":621,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["getfocusableelements",{"_index":44,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["getfocusableelements(container",{"_index":122,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["getfocusorigin",{"_index":506,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["getfocusorigin(element",{"_index":514,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["geticononly",{"_index":347,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["getnextzindex",{"_index":718,"title":{},"body":{"injectables/OverlayService.html":{}}}],["getrenderedcontent",{"_index":594,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["getrenderedcontent(icon",{"_index":619,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["gets",{"_index":123,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["getting",{"_index":1043,"title":{},"body":{"contributing.html":{}}}],["getwindowheight",{"_index":820,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["getwindowwidth",{"_index":821,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["ghost",{"_index":322,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["github",{"_index":1051,"title":{},"body":{"contributing.html":{}}}],["global.scss",{"_index":357,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["guide",{"_index":1041,"title":{},"body":{"contributing.html":{}}}],["guided",{"_index":769,"title":{},"body":{"components/PageComponent.html":{}}}],["guidelines",{"_index":877,"title":{},"body":{"contributing.html":{}}}],["h1",{"_index":551,"title":{},"body":{"components/HeaderComponent.html":{}}}],["h2",{"_index":788,"title":{},"body":{"components/PageComponent.html":{}}}],["handler",{"_index":236,"title":{},"body":{"components/ButtonComponent.html":{}}}],["handlers",{"_index":949,"title":{},"body":{"contributing.html":{}}}],["handy",{"_index":757,"title":{},"body":{"components/PageComponent.html":{}}}],["header",{"_index":539,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":289,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["header.css",{"_index":540,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":288,"title":{"components/HeaderComponent.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["heartstraightoutline",{"_index":650,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["height",{"_index":251,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["help",{"_index":1044,"title":{},"body":{"contributing.html":{}}}],["helper",{"_index":444,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["helpers",{"_index":13,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["helpers.ts",{"_index":868,"title":{},"body":{"interfaces/TestConfig.html":{}}}],["helps",{"_index":761,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["helvetica",{"_index":255,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["here",{"_index":756,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{},"index.html":{}}}],["hidden",{"_index":167,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["high",{"_index":1054,"title":{},"body":{"contributing.html":{}}}],["higher",{"_index":759,"title":{},"body":{"components/PageComponent.html":{}}}],["hint",{"_index":157,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["host",{"_index":311,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["hover",{"_index":422,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["html",{"_index":280,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["htmlelement",{"_index":98,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"interfaces/OverlayData.html":{},"injectables/OverlayService.html":{}}}],["htmlinputelement).value",{"_index":449,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["httpbackend",{"_index":600,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["httpclient",{"_index":620,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["icon",{"_index":368,"title":{},"body":{"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{}}}],["icon'},{'name",{"_index":291,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["icon:not",{"_index":379,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["icondefinition",{"_index":330,"title":{"interfaces/IconDefinition.html":{}},"body":{"components/ButtonComponent-1.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{}}}],["iconmodule",{"_index":554,"title":{"modules/IconModule.html":{}},"body":{"modules/IconModule.html":{},"modules.html":{},"overview.html":{}}}],["icononly",{"_index":329,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["icons",{"_index":614,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"index.html":{}}}],["icons/src/component/icon.component.ts",{"_index":644,"title":{},"body":{"components/NxIconComponent.html":{}}}],["icons/src/component/icon.directive.ts",{"_index":654,"title":{},"body":{"directives/NxIconDirective.html":{},"interfaces/RenderMeta.html":{}}}],["icons/src/component/icon.module.ts",{"_index":567,"title":{},"body":{"modules/IconModule.html":{}}}],["icons/src/component/icon.service.ts",{"_index":575,"title":{},"body":{"injectables/IconService.html":{}}}],["icons/src/types.ts",{"_index":431,"title":{},"body":{"interfaces/CachedIconDefinition.html":{},"interfaces/IconDefinition.html":{},"interfaces/Manifest.html":{},"miscellaneous/typealiases.html":{}}}],["iconservice",{"_index":574,"title":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["id",{"_index":34,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["ids",{"_index":153,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["implementation",{"_index":442,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["implementing",{"_index":439,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["implements",{"_index":303,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"injectables/ResponsiveUtility.html":{}}}],["import",{"_index":350,"title":{},"body":{"components/ButtonComponent-1.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"contributing.html":{},"index.html":{}}}],["important",{"_index":420,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["imported",{"_index":356,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["imports",{"_index":209,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"interfaces/TestConfig.html":{},"index.html":{}}}],["inactive",{"_index":853,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["include",{"_index":363,"title":{},"body":{"components/ButtonComponent-1.html":{},"contributing.html":{}}}],["including",{"_index":1024,"title":{},"body":{"contributing.html":{}}}],["inclusive",{"_index":838,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["incomplete",{"_index":1033,"title":{},"body":{"contributing.html":{}}}],["inconsistent",{"_index":1035,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":38,"title":{"index.html":{}},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["infinite",{"_index":415,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{}}}],["information",{"_index":1027,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["inherit",{"_index":400,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/PageComponent.html":{}}}],["inject(a11yutility",{"_index":30,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["inject(focusmonitor",{"_index":499,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["inject(ngcontrol",{"_index":639,"title":{},"body":{"directives/InputDirective.html":{}}}],["inject(overlayservice",{"_index":710,"title":{},"body":{"injectables/OverlayService.html":{}}}],["inject(responsiveutility",{"_index":809,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["injectable",{"_index":0,"title":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}},"body":{}}],["injectables",{"_index":2,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"overview.html":{}}}],["inline",{"_index":239,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["input",{"_index":36,"title":{},"body":{"injectables/A11yUtility.html":{},"directives/InputDirective.html":{}}}],["input[nx",{"_index":295,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["input]'},{'name",{"_index":297,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["input],textarea[nx",{"_index":296,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["inputdirective",{"_index":294,"title":{"directives/InputDirective.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["inputs",{"_index":214,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["insertspan",{"_index":315,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["insertspan(nodes",{"_index":335,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["inset",{"_index":268,"title":{},"body":{"components/ButtonComponent.html":{}}}],["install",{"_index":1083,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1081,"title":{},"body":{"index.html":{}}}],["instead",{"_index":351,"title":{},"body":{"components/ButtonComponent-1.html":{},"modules/IconModule.html":{},"modules/NxIconModule.html":{}}}],["integration",{"_index":920,"title":{},"body":{"contributing.html":{}}}],["interaction",{"_index":477,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["interactive",{"_index":889,"title":{},"body":{"contributing.html":{}}}],["interest",{"_index":875,"title":{},"body":{"contributing.html":{}}}],["interface",{"_index":182,"title":{"interfaces/BreakpointConfig.html":{},"interfaces/CachedIconDefinition.html":{},"interfaces/FocusMonitorData.html":{},"interfaces/IconDefinition.html":{},"interfaces/Manifest.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{}},"body":{"classes/ControlValueAccessorBase.html":{},"contributing.html":{}}}],["interfaces",{"_index":184,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"interfaces/CachedIconDefinition.html":{},"interfaces/FocusMonitorData.html":{},"interfaces/IconDefinition.html":{},"interfaces/Manifest.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"overview.html":{}}}],["isarrowdown",{"_index":45,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowdown(event",{"_index":128,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowkey",{"_index":46,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowkey(event",{"_index":136,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowleft",{"_index":47,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowleft(event",{"_index":138,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowright",{"_index":48,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowright(event",{"_index":140,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowup",{"_index":49,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isarrowup(event",{"_index":142,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isbetweenbreakpoints",{"_index":822,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbetweenbreakpoints(min",{"_index":832,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpoint",{"_index":823,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpoint(breakpoint",{"_index":840,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorlarger",{"_index":824,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorlarger('md",{"_index":843,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorlarger(breakpoint",{"_index":842,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorsmaller",{"_index":825,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorsmaller('md",{"_index":847,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isbreakpointorsmaller(breakpoint",{"_index":846,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["isdisabled",{"_index":486,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["isenter",{"_index":50,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isenter(event",{"_index":144,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isescape",{"_index":51,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isescape(event",{"_index":146,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isfocuswithin",{"_index":507,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["isfocuswithin(element",{"_index":518,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["isopen",{"_index":164,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isspace",{"_index":52,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["isspace(event",{"_index":148,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["istab",{"_index":53,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["istab(event",{"_index":150,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["items",{"_index":373,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{}}}],["justify",{"_index":375,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{}}}],["keep",{"_index":88,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["key",{"_index":133,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["keyboard",{"_index":16,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["keyboardevent",{"_index":129,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["keyframes",{"_index":425,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["label",{"_index":170,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{}}}],["labelledby",{"_index":115,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["large",{"_index":233,"title":{},"body":{"components/ButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["larger",{"_index":845,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["later",{"_index":106,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["layout",{"_index":389,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["left",{"_index":398,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"interfaces/OverlayPosition.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["leftend",{"_index":1136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["leftstart",{"_index":1135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["legend",{"_index":279,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["level",{"_index":84,"title":{},"body":{"injectables/A11yUtility.html":{},"components/PageComponent.html":{}}}],["levels",{"_index":1118,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lg",{"_index":191,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"components/ButtonComponent-1.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["li",{"_index":795,"title":{},"body":{"components/PageComponent.html":{}}}],["library",{"_index":1079,"title":{},"body":{"index.html":{}}}],["line",{"_index":250,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["linear",{"_index":414,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["link",{"_index":385,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["links",{"_index":953,"title":{},"body":{"contributing.html":{}}}],["literal",{"_index":616,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["live",{"_index":69,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["loading",{"_index":365,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["long",{"_index":87,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["longer",{"_index":95,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["loses",{"_index":475,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["make",{"_index":1055,"title":{},"body":{"contributing.html":{}}}],["makes",{"_index":750,"title":{},"body":{"components/PageComponent.html":{},"index.html":{}}}],["management",{"_index":497,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["managing",{"_index":493,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{}}}],["manifest",{"_index":642,"title":{"interfaces/Manifest.html":{}},"body":{"interfaces/Manifest.html":{}}}],["manual",{"_index":906,"title":{},"body":{"contributing.html":{}}}],["map",{"_index":618,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["margin",{"_index":380,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["mark",{"_index":474,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["markastouched",{"_index":457,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["matches",{"_index":841,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["matching",{"_index":181,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":786,"title":{},"body":{"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["maximum",{"_index":839,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["md",{"_index":192,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["mdx",{"_index":887,"title":{},"body":{"contributing.html":{}}}],["medium",{"_index":232,"title":{},"body":{"components/ButtonComponent.html":{}}}],["member",{"_index":980,"title":{},"body":{"contributing.html":{}}}],["merge",{"_index":862,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["merged",{"_index":993,"title":{},"body":{"contributing.html":{}}}],["message",{"_index":66,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["meta",{"_index":958,"title":{},"body":{"contributing.html":{}}}],["metadata",{"_index":204,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"components/PageComponent.html":{}}}],["method",{"_index":91,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{}}}],["methods",{"_index":39,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["middle",{"_index":378,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["min",{"_index":836,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["minimum",{"_index":837,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["miscellaneous",{"_index":1108,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1032,"title":{},"body":{"contributing.html":{}}}],["mistakes",{"_index":925,"title":{},"body":{"contributing.html":{}}}],["mock",{"_index":749,"title":{},"body":{"components/PageComponent.html":{}}}],["modal",{"_index":178,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["module",{"_index":353,"title":{"modules/IconModule.html":{},"modules/NxIconModule.html":{}},"body":{"components/ButtonComponent-1.html":{},"modules/IconModule.html":{},"modules/NxIconModule.html":{},"overview.html":{}}}],["modules",{"_index":555,"title":{"modules.html":{}},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":676,"title":{},"body":{"modules/NxIconModule.html":{}}}],["monitor",{"_index":508,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["monitor(element",{"_index":522,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["monitor.ts",{"_index":491,"title":{},"body":{"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"miscellaneous/typealiases.html":{}}}],["monitored",{"_index":515,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["monitored/focused",{"_index":517,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["monitoring",{"_index":492,"title":{},"body":{"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{}}}],["monitors",{"_index":523,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["more",{"_index":773,"title":{},"body":{"components/PageComponent.html":{},"index.html":{}}}],["mouse",{"_index":1122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ms",{"_index":89,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["multiple",{"_index":891,"title":{},"body":{"contributing.html":{}}}],["mycomponent",{"_index":26,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"injectables/ResponsiveUtility.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/User.html":{},"contributing.html":{}}}],["names",{"_index":1119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["navigate",{"_index":755,"title":{},"body":{"components/PageComponent.html":{}}}],["navigation",{"_index":17,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["need",{"_index":1045,"title":{},"body":{"contributing.html":{}}}],["needed",{"_index":96,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["needing",{"_index":754,"title":{},"body":{"components/PageComponent.html":{}}}],["needs",{"_index":899,"title":{},"body":{"contributing.html":{}}}],["neue",{"_index":256,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["new",{"_index":473,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"contributing.html":{},"index.html":{}}}],["next",{"_index":728,"title":{},"body":{"injectables/OverlayService.html":{}}}],["ng",{"_index":1090,"title":{},"body":{"index.html":{}}}],["ngaftercontentinit",{"_index":316,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["ngafterviewinit",{"_index":317,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{}}}],["ngcontrol",{"_index":628,"title":{},"body":{"directives/InputDirective.html":{}}}],["ngmodule",{"_index":1101,"title":{},"body":{"index.html":{}}}],["ngonchanges",{"_index":318,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["ngonchanges(changes",{"_index":340,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["ngondestroy",{"_index":319,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["ngoninit",{"_index":31,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"directives/InputDirective.html":{},"injectables/ResponsiveUtility.html":{}}}],["ngx",{"_index":649,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"index.html":{}}}],["nodelist",{"_index":336,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["nodes",{"_index":339,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["non",{"_index":1034,"title":{},"body":{"contributing.html":{}}}],["none",{"_index":406,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["noted",{"_index":1006,"title":{},"body":{"contributing.html":{}}}],["notify",{"_index":464,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["npm",{"_index":1094,"title":{},"body":{"index.html":{}}}],["null",{"_index":171,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":64,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent-1.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["nunito",{"_index":253,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["nx",{"_index":121,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["nxblock",{"_index":323,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["nxbuttonmodule",{"_index":1099,"title":{},"body":{"index.html":{}}}],["nxbuttonshapes",{"_index":332,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["nxbuttonsizes",{"_index":333,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["nxbuttonvariants",{"_index":334,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["nxicon",{"_index":300,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"components/PageComponent.html":{}}}],["nxicon]'},{'name",{"_index":299,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["nxiconcomponent",{"_index":290,"title":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["nxicondirective",{"_index":298,"title":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["nxiconmodule",{"_index":669,"title":{"modules/NxIconModule.html":{}},"body":{"modules/NxIconModule.html":{},"modules.html":{},"overview.html":{}}}],["nxicontheme",{"_index":324,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["nxinput",{"_index":625,"title":{},"body":{"directives/InputDirective.html":{}}}],["nxinputsize",{"_index":631,"title":{},"body":{"directives/InputDirective.html":{},"miscellaneous/typealiases.html":{}}}],["nxinputstatus",{"_index":632,"title":{},"body":{"directives/InputDirective.html":{},"miscellaneous/typealiases.html":{}}}],["nxinputvariant",{"_index":633,"title":{},"body":{"directives/InputDirective.html":{},"miscellaneous/typealiases.html":{}}}],["nxloading",{"_index":313,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["nxshape",{"_index":325,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["nxsize",{"_index":326,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/InputDirective.html":{}}}],["nxstatus",{"_index":629,"title":{},"body":{"directives/InputDirective.html":{}}}],["nxvariant",{"_index":327,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/InputDirective.html":{}}}],["nzicondirectiveelement",{"_index":314,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["object",{"_index":652,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["observable",{"_index":524,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"injectables/ResponsiveUtility.html":{}}}],["observables",{"_index":807,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observe",{"_index":854,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpoint",{"_index":826,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpoint(breakpoint",{"_index":849,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpointorlarger",{"_index":827,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpointorlarger(breakpoint",{"_index":856,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpointorsmaller",{"_index":828,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observebreakpointorsmaller(breakpoint",{"_index":857,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["observes",{"_index":850,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["occurred",{"_index":75,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["occurs",{"_index":478,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["offset",{"_index":682,"title":{},"body":{"interfaces/OverlayConfig.html":{}}}],["onblur",{"_index":451,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["onchange",{"_index":454,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["onchanges",{"_index":305,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["onclick",{"_index":219,"title":{},"body":{"components/ButtonComponent.html":{}}}],["oncreateaccount",{"_index":544,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ondestroy",{"_index":304,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{}}}],["oninit",{"_index":308,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/InputDirective.html":{},"injectables/ResponsiveUtility.html":{}}}],["oninput(event",{"_index":447,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["onlogin",{"_index":545,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onlogout",{"_index":546,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ontouched",{"_index":455,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["opacity",{"_index":401,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["open",{"_index":1077,"title":{},"body":{"index.html":{}}}],["optimal",{"_index":726,"title":{},"body":{"injectables/OverlayService.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{}}}],["options",{"_index":869,"title":{},"body":{"interfaces/TestConfig.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["organization",{"_index":1014,"title":{},"body":{"contributing.html":{}}}],["origin",{"_index":495,"title":{},"body":{"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"miscellaneous/typealiases.html":{}}}],["origins",{"_index":525,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["otherwise",{"_index":855,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["out",{"_index":566,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"overview.html":{}}}],["outline",{"_index":384,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["outlined",{"_index":634,"title":{},"body":{"directives/InputDirective.html":{},"miscellaneous/typealiases.html":{}}}],["outputs",{"_index":218,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{}}}],["overlay",{"_index":679,"title":{},"body":{"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{}}}],["overlayconfig",{"_index":677,"title":{"interfaces/OverlayConfig.html":{}},"body":{"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["overlaydata",{"_index":692,"title":{"interfaces/OverlayData.html":{}},"body":{"interfaces/OverlayData.html":{}}}],["overlayelement",{"_index":695,"title":{},"body":{"interfaces/OverlayData.html":{},"injectables/OverlayService.html":{}}}],["overlayplacement",{"_index":690,"title":{},"body":{"interfaces/OverlayConfig.html":{},"interfaces/OverlayPosition.html":{},"miscellaneous/typealiases.html":{}}}],["overlayposition",{"_index":699,"title":{"interfaces/OverlayPosition.html":{}},"body":{"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{}}}],["overlays",{"_index":702,"title":{},"body":{"injectables/OverlayService.html":{},"miscellaneous/typealiases.html":{}}}],["overlayservice",{"_index":701,"title":{"injectables/OverlayService.html":{}},"body":{"injectables/OverlayService.html":{}}}],["overview",{"_index":911,"title":{"overview.html":{}},"body":{"contributing.html":{},"overview.html":{}}}],["p",{"_index":791,"title":{},"body":{"components/PageComponent.html":{}}}],["package",{"_index":1057,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1088,"title":{},"body":{"index.html":{}}}],["padding",{"_index":271,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["page",{"_index":230,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["page.css",{"_index":738,"title":{},"body":{"components/PageComponent.html":{}}}],["pagecomponent",{"_index":292,"title":{"components/PageComponent.html":{}},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["pages",{"_index":739,"title":{},"body":{"components/PageComponent.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["part",{"_index":481,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["partial",{"_index":859,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["path",{"_index":802,"title":{},"body":{"components/PageComponent.html":{}}}],["pattern",{"_index":1022,"title":{},"body":{"contributing.html":{}}}],["pattern.ts",{"_index":1013,"title":{},"body":{"contributing.html":{}}}],["patterns",{"_index":758,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["peer",{"_index":977,"title":{},"body":{"contributing.html":{}}}],["performance",{"_index":935,"title":{},"body":{"contributing.html":{}}}],["pitfalls",{"_index":939,"title":{},"body":{"contributing.html":{}}}],["pixel",{"_index":188,"title":{},"body":{"interfaces/BreakpointConfig.html":{}}}],["pixels",{"_index":689,"title":{},"body":{"interfaces/OverlayConfig.html":{},"injectables/ResponsiveUtility.html":{}}}],["placement",{"_index":683,"title":{},"body":{"interfaces/OverlayConfig.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"miscellaneous/typealiases.html":{}}}],["pointer",{"_index":242,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}}}],["polite",{"_index":83,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["politeness",{"_index":61,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["popovers",{"_index":704,"title":{},"body":{"injectables/OverlayService.html":{}}}],["position",{"_index":391,"title":{},"body":{"components/ButtonComponent-1.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{}}}],["positioning",{"_index":680,"title":{},"body":{"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["practices",{"_index":905,"title":{},"body":{"contributing.html":{}}}],["preferred",{"_index":691,"title":{},"body":{"interfaces/OverlayConfig.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["primary",{"_index":216,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["principal",{"_index":227,"title":{},"body":{"components/ButtonComponent.html":{}}}],["private",{"_index":28,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["process",{"_index":744,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["program",{"_index":1124,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["project",{"_index":878,"title":{},"body":{"contributing.html":{}}}],["project_name",{"_index":1091,"title":{},"body":{"index.html":{}}}],["projects/.../a11y.utility.ts",{"_index":1111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../button.component.ts",{"_index":1114,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../focus",{"_index":1113,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../input.directive.ts",{"_index":1115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../overlay.service.ts",{"_index":1116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../responsive.utility.ts",{"_index":1112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":1117,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/ngx",{"_index":5,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["promise",{"_index":663,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["prop",{"_index":894,"title":{},"body":{"contributing.html":{}}}],["proper",{"_index":1029,"title":{},"body":{"contributing.html":{}}}],["properly",{"_index":1003,"title":{},"body":{"contributing.html":{}}}],["properties",{"_index":190,"title":{"properties.html":{}},"body":{"interfaces/BreakpointConfig.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"interfaces/FocusMonitorData.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"properties.html":{}}}],["props",{"_index":890,"title":{},"body":{"contributing.html":{}}}],["protected",{"_index":453,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["provided",{"_index":1009,"title":{},"body":{"contributing.html":{}}}],["providenxicons",{"_index":569,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{}}}],["providers",{"_index":559,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"interfaces/TestConfig.html":{},"overview.html":{}}}],["provides",{"_index":12,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["public",{"_index":815,"title":{},"body":{"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["purpose",{"_index":914,"title":{},"body":{"contributing.html":{}}}],["quality",{"_index":994,"title":{},"body":{"contributing.html":{}}}],["questions",{"_index":1050,"title":{},"body":{"contributing.html":{}}}],["radius",{"_index":245,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/PageComponent.html":{}}}],["read",{"_index":346,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/PageComponent.html":{}}}],["reader",{"_index":21,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["readers",{"_index":67,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["readme",{"_index":1076,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":580,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"injectables/ResponsiveUtility.html":{}}}],["real",{"_index":943,"title":{},"body":{"contributing.html":{}}}],["receives",{"_index":527,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["recommend",{"_index":740,"title":{},"body":{"components/PageComponent.html":{},"index.html":{}}}],["recommendations",{"_index":938,"title":{},"body":{"contributing.html":{}}}],["reference",{"_index":947,"title":{},"body":{"contributing.html":{}}}],["references",{"_index":1038,"title":{},"body":{"contributing.html":{}}}],["region",{"_index":70,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":483,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"injectables/OverlayService.html":{}}}],["register(triggerelement",{"_index":733,"title":{},"body":{"injectables/OverlayService.html":{}}}],["registered",{"_index":693,"title":{},"body":{"interfaces/OverlayData.html":{}}}],["registeronchange",{"_index":458,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["registeronchange(fn",{"_index":479,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["registerontouched",{"_index":459,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["registerontouched(fn",{"_index":484,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["registers",{"_index":480,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"injectables/OverlayService.html":{}}}],["related",{"_index":952,"title":{},"body":{"contributing.html":{}}}],["relationships",{"_index":114,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["relative",{"_index":392,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/OverlayService.html":{}}}],["remove",{"_index":92,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["render",{"_index":748,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["renderer",{"_index":337,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["renderer2",{"_index":338,"title":{},"body":{"components/ButtonComponent-1.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["rendererfactory2",{"_index":598,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["rendermeta",{"_index":664,"title":{"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{}},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{}}}],["reposition",{"_index":686,"title":{},"body":{"interfaces/OverlayConfig.html":{}}}],["repositioning",{"_index":707,"title":{},"body":{"injectables/OverlayService.html":{}}}],["represents",{"_index":535,"title":{},"body":{"interfaces/FocusMonitorData.html":{}}}],["request",{"_index":1053,"title":{},"body":{"contributing.html":{}}}],["required",{"_index":698,"title":{},"body":{"interfaces/OverlayData.html":{},"contributing.html":{}}}],["requirements",{"_index":884,"title":{},"body":{"contributing.html":{}}}],["reset",{"_index":565,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"overview.html":{}}}],["resources",{"_index":731,"title":{},"body":{"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["responsive",{"_index":806,"title":{},"body":{"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["responsiveutility",{"_index":805,"title":{"injectables/ResponsiveUtility.html":{}},"body":{"injectables/ResponsiveUtility.html":{}}}],["results",{"_index":180,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":90,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["review",{"_index":753,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["reviews",{"_index":981,"title":{},"body":{"contributing.html":{}}}],["rgba(0",{"_index":264,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{}}}],["rich",{"_index":908,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["right",{"_index":381,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["rightend",{"_index":1132,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rightstart",{"_index":1131,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["roles",{"_index":929,"title":{},"body":{"contributing.html":{}}}],["rotate(0deg",{"_index":427,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["rotate(360deg",{"_index":429,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["round",{"_index":386,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["routes",{"_index":1107,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1000,"title":{},"body":{"contributing.html":{}}}],["rxjs",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["sanitizer",{"_index":602,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["sans",{"_index":254,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["scenarios",{"_index":917,"title":{},"body":{"contributing.html":{}}}],["schemas",{"_index":871,"title":{},"body":{"interfaces/TestConfig.html":{}}}],["scope",{"_index":354,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["screen",{"_index":20,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["scroll/resize",{"_index":708,"title":{},"body":{"injectables/OverlayService.html":{}}}],["secondary",{"_index":261,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["section",{"_index":881,"title":{},"body":{"contributing.html":{}}}],["sections",{"_index":909,"title":{},"body":{"contributing.html":{}}}],["select",{"_index":1028,"title":{},"body":{"contributing.html":{}}}],["selector",{"_index":205,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"components/PageComponent.html":{}}}],["self",{"_index":640,"title":{},"body":{"directives/InputDirective.html":{},"contributing.html":{}}}],["separated",{"_index":160,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["serif",{"_index":258,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["service",{"_index":9,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["services",{"_index":768,"title":{},"body":{"components/PageComponent.html":{}}}],["set",{"_index":159,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariadescribedby",{"_index":54,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariadescribedby(element",{"_index":152,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariaexpanded",{"_index":55,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariaexpanded(element",{"_index":161,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariahidden",{"_index":56,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setariahidden(element",{"_index":166,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setarialabel",{"_index":57,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setarialabel(element",{"_index":169,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setarialabelledby",{"_index":58,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setarialabelledby(element",{"_index":176,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["setbreakpointconfig",{"_index":829,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["setbreakpointconfig(config",{"_index":858,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["setdisabledstate",{"_index":460,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["setdisabledstate(isdisabled",{"_index":485,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["sets",{"_index":154,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{}}}],["shadow",{"_index":263,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}}}],["shape",{"_index":387,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["show",{"_index":813,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["showdropdown",{"_index":711,"title":{},"body":{"injectables/OverlayService.html":{}}}],["showing",{"_index":1025,"title":{},"body":{"contributing.html":{}}}],["signal(false",{"_index":635,"title":{},"body":{"directives/InputDirective.html":{}}}],["signal(this.elementref.nativeelement.value",{"_index":641,"title":{},"body":{"directives/InputDirective.html":{}}}],["simplechanges",{"_index":341,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["size",{"_index":217,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["sm",{"_index":193,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"components/ButtonComponent-1.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["small",{"_index":231,"title":{},"body":{"components/ButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["smaller",{"_index":848,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["solid",{"_index":409,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{}}}],["source",{"_index":1078,"title":{},"body":{"index.html":{}}}],["space",{"_index":149,"title":{},"body":{"injectables/A11yUtility.html":{},"components/HeaderComponent.html":{}}}],["spacing",{"_index":370,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["span",{"_index":367,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["specific",{"_index":851,"title":{},"body":{"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["specifically",{"_index":882,"title":{},"body":{"contributing.html":{}}}],["specified",{"_index":520,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{}}}],["spin",{"_index":412,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["spinner",{"_index":407,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["standalone",{"_index":208,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"modules/IconModule.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{}}}],["standard",{"_index":441,"title":{},"body":{"classes/ControlValueAccessorBase.html":{},"interfaces/TestConfig.html":{},"contributing.html":{}}}],["standards",{"_index":880,"title":{},"body":{"contributing.html":{}}}],["starting",{"_index":745,"title":{},"body":{"components/PageComponent.html":{}}}],["state",{"_index":390,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"contributing.html":{}}}],["states",{"_index":494,"title":{},"body":{"injectables/FocusMonitor.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["static",{"_index":673,"title":{},"body":{"modules/NxIconModule.html":{}}}],["stays",{"_index":103,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["stop",{"_index":533,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{}}}],["stopmonitoring",{"_index":509,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["stopmonitoring(element",{"_index":531,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["stops",{"_index":532,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["stories",{"_index":766,"title":{},"body":{"components/PageComponent.html":{},"contributing.html":{}}}],["stories.ts",{"_index":888,"title":{},"body":{"contributing.html":{}}}],["story",{"_index":969,"title":{},"body":{"contributing.html":{}}}],["storybook",{"_index":206,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["storybook/angular",{"_index":960,"title":{},"body":{"contributing.html":{}}}],["storybook/blocks",{"_index":971,"title":{},"body":{"contributing.html":{}}}],["storybook/templates",{"_index":1010,"title":{},"body":{"contributing.html":{}}}],["storyobj",{"_index":959,"title":{},"body":{"contributing.html":{}}}],["str",{"_index":607,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["string",{"_index":60,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["style",{"_index":957,"title":{},"body":{"contributing.html":{}}}],["style/button.component.scss",{"_index":312,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["style/mixins",{"_index":359,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["style/themes",{"_index":358,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["styles",{"_index":200,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["styleurls",{"_index":211,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["styling",{"_index":937,"title":{},"body":{"contributing.html":{}}}],["subject",{"_index":537,"title":{},"body":{"interfaces/FocusMonitorData.html":{}}}],["submitting",{"_index":974,"title":{},"body":{"contributing.html":{}}}],["success",{"_index":1126,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["such",{"_index":763,"title":{},"body":{"components/PageComponent.html":{}}}],["support",{"_index":930,"title":{},"body":{"contributing.html":{},"modules.html":{}}}],["svg",{"_index":550,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"components/PageComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["svgelement",{"_index":433,"title":{},"body":{"interfaces/CachedIconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["synchronously",{"_index":830,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["t",{"_index":468,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["tab",{"_index":151,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["tabbing",{"_index":104,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["tabindex",{"_index":328,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["tags",{"_index":417,"title":{},"body":{"components/ButtonComponent-1.html":{},"contributing.html":{}}}],["take",{"_index":1085,"title":{},"body":{"index.html":{}}}],["team",{"_index":979,"title":{},"body":{"contributing.html":{}}}],["technical",{"_index":998,"title":{},"body":{"contributing.html":{}}}],["template",{"_index":213,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["templates",{"_index":1008,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":867,"title":{},"body":{"interfaces/TestConfig.html":{},"contributing.html":{}}}],["testconfig",{"_index":864,"title":{"interfaces/TestConfig.html":{}},"body":{"interfaces/TestConfig.html":{}}}],["testing",{"_index":986,"title":{},"body":{"contributing.html":{}}}],["text",{"_index":175,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"contributing.html":{}}}],["thank",{"_index":874,"title":{},"body":{"contributing.html":{}}}],["theme",{"_index":432,"title":{},"body":{"interfaces/CachedIconDefinition.html":{},"interfaces/IconDefinition.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{}}}],["themetype",{"_index":331,"title":{},"body":{"components/ButtonComponent-1.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"miscellaneous/typealiases.html":{}}}],["this.a11y.generateuniqueid('my",{"_index":35,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["this.a11y.setariadescribedby(this.inputelement",{"_index":37,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["this.controldisabled",{"_index":637,"title":{},"body":{"directives/InputDirective.html":{}}}],["this.disabled",{"_index":638,"title":{},"body":{"directives/InputDirective.html":{}}}],["this.dropdownelement",{"_index":714,"title":{},"body":{"injectables/OverlayService.html":{}}}],["this.emitchange(value",{"_index":450,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["this.focusmonitor.monitor(this.elementref).subscribe(origin",{"_index":500,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["this.focusmonitor.stopmonitoring(this.elementref",{"_index":504,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["this.markastouched",{"_index":452,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["this.ngcontrol",{"_index":636,"title":{},"body":{"directives/InputDirective.html":{}}}],["this.overlayservice.applyposition(this.dropdownelement",{"_index":715,"title":{},"body":{"injectables/OverlayService.html":{}}}],["this.overlayservice.calculateposition",{"_index":712,"title":{},"body":{"injectables/OverlayService.html":{}}}],["this.responsiveutility.currentbreakpoint$.subscribe(breakpoint",{"_index":810,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["this.responsiveutility.isbreakpoint('md",{"_index":812,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["this.triggerelement",{"_index":713,"title":{},"body":{"injectables/OverlayService.html":{}}}],["tip",{"_index":775,"title":{},"body":{"components/PageComponent.html":{}}}],["title",{"_index":179,"title":{},"body":{"injectables/A11yUtility.html":{},"contributing.html":{}}}],["toolbar",{"_index":780,"title":{},"body":{"components/PageComponent.html":{}}}],["tooling",{"_index":1089,"title":{},"body":{"index.html":{}}}],["tooltips",{"_index":705,"title":{},"body":{"injectables/OverlayService.html":{}}}],["top",{"_index":395,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"interfaces/OverlayPosition.html":{},"components/PageComponent.html":{},"miscellaneous/typealiases.html":{}}}],["topend",{"_index":1130,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["topstart",{"_index":1129,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["touch",{"_index":1123,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["touched",{"_index":467,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["tracking",{"_index":694,"title":{},"body":{"interfaces/OverlayData.html":{},"injectables/ResponsiveUtility.html":{}}}],["transform",{"_index":426,"title":{},"body":{"components/ButtonComponent-1.html":{},"directives/InputDirective.html":{}}}],["transition",{"_index":403,"title":{},"body":{"components/ButtonComponent-1.html":{}}}],["transparent",{"_index":269,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{}}}],["trap",{"_index":100,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["trapping",{"_index":19,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["tree",{"_index":202,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["trigger",{"_index":688,"title":{},"body":{"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["triggerelement",{"_index":696,"title":{},"body":{"interfaces/OverlayData.html":{},"injectables/OverlayService.html":{}}}],["triggers",{"_index":727,"title":{},"body":{"injectables/OverlayService.html":{}}}],["true",{"_index":135,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"injectables/FocusMonitor.html":{},"components/HeaderComponent.html":{},"directives/InputDirective.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["ts",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["tutorial",{"_index":770,"title":{},"body":{"components/PageComponent.html":{}}}],["tutorials",{"_index":772,"title":{},"body":{"components/PageComponent.html":{}}}],["two",{"_index":834,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["twotone",{"_index":651,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["twotonecolor",{"_index":804,"title":{},"body":{"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/A11yUtility.html":{},"interfaces/BreakpointConfig.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"modules/NxIconModule.html":{},"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"interfaces/RenderMeta.html":{},"interfaces/RenderMeta-1.html":{},"injectables/ResponsiveUtility.html":{},"interfaces/TestConfig.html":{},"interfaces/User.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1109,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":950,"title":{},"body":{"contributing.html":{}}}],["ui",{"_index":349,"title":{},"body":{"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"contributing.html":{},"index.html":{}}}],["uis",{"_index":742,"title":{},"body":{"components/PageComponent.html":{}}}],["ul",{"_index":793,"title":{},"body":{"components/PageComponent.html":{}}}],["unclear",{"_index":1039,"title":{},"body":{"contributing.html":{}}}],["undefined",{"_index":553,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["unique",{"_index":110,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["unnamed",{"_index":348,"title":{},"body":{"components/ButtonComponent-1.html":{},"interfaces/CachedIconDefinition.html":{},"interfaces/IconDefinition.html":{},"modules/IconModule.html":{},"injectables/IconService.html":{},"interfaces/Manifest.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"directives/NxIconDirective.html":{},"interfaces/RenderMeta.html":{},"contributing.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/button",{"_index":1100,"title":{},"body":{"index.html":{}}}],["unnamed/src/lib/components",{"_index":1015,"title":{},"body":{"contributing.html":{}}}],["unnamed/src/lib/components/button/button.component.ts",{"_index":302,"title":{},"body":{"components/ButtonComponent-1.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/lib/components/icon/icon.component.ts",{"_index":653,"title":{},"body":{"components/NxIconComponent-1.html":{}}}],["unnamed/src/lib/components/icon/icon.directive.ts",{"_index":668,"title":{},"body":{"directives/NxIconDirective-1.html":{},"interfaces/RenderMeta-1.html":{}}}],["unnamed/src/lib/components/icon/icon.module.ts",{"_index":672,"title":{},"body":{"modules/NxIconModule.html":{}}}],["unnamed/src/lib/components/icon/icon.service.ts",{"_index":622,"title":{},"body":{"injectables/IconService-1.html":{}}}],["unnamed/src/lib/components/input/input.directive.ts",{"_index":623,"title":{},"body":{"directives/InputDirective.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/lib/utils/a11y.utility.ts",{"_index":6,"title":{},"body":{"injectables/A11yUtility.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/lib/utils/control",{"_index":435,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["unnamed/src/lib/utils/focus",{"_index":490,"title":{},"body":{"injectables/FocusMonitor.html":{},"interfaces/FocusMonitorData.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/lib/utils/overlay.service.ts",{"_index":678,"title":{},"body":{"interfaces/OverlayConfig.html":{},"interfaces/OverlayData.html":{},"interfaces/OverlayPosition.html":{},"injectables/OverlayService.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/lib/utils/responsive.utility.ts",{"_index":185,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["unnamed/src/stories/button.component.ts",{"_index":203,"title":{},"body":{"components/ButtonComponent.html":{}}}],["unnamed/src/stories/header.component.ts",{"_index":538,"title":{},"body":{"components/HeaderComponent.html":{}}}],["unnamed/src/stories/page.component.ts",{"_index":737,"title":{},"body":{"components/PageComponent.html":{}}}],["unnamed/src/stories/user.ts",{"_index":872,"title":{},"body":{"interfaces/User.html":{}}}],["unnamed/src/test",{"_index":865,"title":{},"body":{"interfaces/TestConfig.html":{}}}],["unnmed",{"_index":1080,"title":{},"body":{"index.html":{}}}],["unregister",{"_index":719,"title":{},"body":{"injectables/OverlayService.html":{}}}],["unregister(overlayelement",{"_index":735,"title":{},"body":{"injectables/OverlayService.html":{}}}],["unregisters",{"_index":736,"title":{},"body":{"injectables/OverlayService.html":{}}}],["up",{"_index":529,"title":{},"body":{"injectables/FocusMonitor.html":{},"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["updateposition",{"_index":697,"title":{},"body":{"interfaces/OverlayData.html":{}}}],["updates",{"_index":734,"title":{},"body":{"injectables/OverlayService.html":{},"injectables/ResponsiveUtility.html":{}}}],["url",{"_index":610,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["usage",{"_index":572,"title":{},"body":{"modules/IconModule.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"modules/NxIconModule.html":{},"contributing.html":{},"index.html":{}}}],["use",{"_index":224,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"modules/IconModule.html":{},"modules/NxIconModule.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{},"contributing.html":{},"index.html":{}}}],["used",{"_index":647,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["useful",{"_index":112,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["usejsonploading",{"_index":595,"title":{},"body":{"injectables/IconService.html":{},"injectables/IconService-1.html":{}}}],["user",{"_index":476,"title":{"interfaces/User.html":{}},"body":{"classes/ControlValueAccessorBase.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{},"interfaces/User.html":{}}}],["user.name",{"_index":543,"title":{},"body":{"components/HeaderComponent.html":{}}}],["using",{"_index":68,"title":{},"body":{"injectables/A11yUtility.html":{},"components/PageComponent.html":{},"contributing.html":{},"index.html":{}}}],["utilities",{"_index":498,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["utility",{"_index":8,"title":{},"body":{"injectables/A11yUtility.html":{}}}],["utils/component",{"_index":866,"title":{},"body":{"interfaces/TestConfig.html":{}}}],["validate",{"_index":1031,"title":{},"body":{"contributing.html":{}}}],["value",{"_index":82,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"components/HeaderComponent.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["values",{"_index":189,"title":{},"body":{"interfaces/BreakpointConfig.html":{}}}],["var",{"_index":282,"title":{},"body":{"components/ButtonComponent.html":{},"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{}}}],["variations",{"_index":892,"title":{},"body":{"contributing.html":{}}}],["verify",{"_index":984,"title":{},"body":{"contributing.html":{}}}],["version",{"_index":1105,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":377,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["via",{"_index":503,"title":{},"body":{"injectables/FocusMonitor.html":{}}}],["viewencapsulation.none",{"_index":310,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["viewport",{"_index":808,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["viewports",{"_index":778,"title":{},"body":{"components/PageComponent.html":{}}}],["void",{"_index":32,"title":{},"body":{"injectables/A11yUtility.html":{},"components/ButtonComponent-1.html":{},"classes/ControlValueAccessorBase.html":{},"injectables/FocusMonitor.html":{},"injectables/IconService.html":{},"injectables/IconService-1.html":{},"directives/InputDirective.html":{},"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{},"injectables/OverlayService.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["vs",{"_index":886,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":1096,"title":{},"body":{"index.html":{}}}],["warning",{"_index":1125,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["wcag",{"_index":1042,"title":{},"body":{"contributing.html":{}}}],["weight",{"_index":248,"title":{},"body":{"components/ButtonComponent.html":{},"components/HeaderComponent.html":{},"components/PageComponent.html":{}}}],["welcome",{"_index":542,"title":{},"body":{"components/HeaderComponent.html":{}}}],["whether",{"_index":165,"title":{},"body":{"injectables/A11yUtility.html":{},"classes/ControlValueAccessorBase.html":{},"interfaces/OverlayConfig.html":{},"injectables/ResponsiveUtility.html":{}}}],["white",{"_index":260,"title":{},"body":{"components/ButtonComponent.html":{}}}],["width",{"_index":396,"title":{},"body":{"components/ButtonComponent-1.html":{},"components/PageComponent.html":{},"injectables/ResponsiveUtility.html":{}}}],["window",{"_index":831,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["windowwidth",{"_index":817,"title":{},"body":{"injectables/ResponsiveUtility.html":{}}}],["within",{"_index":101,"title":{},"body":{"injectables/A11yUtility.html":{},"injectables/FocusMonitor.html":{}}}],["without",{"_index":648,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{},"components/PageComponent.html":{},"contributing.html":{}}}],["work",{"_index":987,"title":{},"body":{"contributing.html":{}}}],["world",{"_index":944,"title":{},"body":{"contributing.html":{}}}],["wrapper",{"_index":798,"title":{},"body":{"components/PageComponent.html":{}}}],["wraps",{"_index":645,"title":{},"body":{"components/NxIconComponent.html":{},"components/NxIconComponent-1.html":{}}}],["writes",{"_index":488,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["writevalue",{"_index":461,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["writevalue(value",{"_index":487,"title":{},"body":{"classes/ControlValueAccessorBase.html":{}}}],["xl",{"_index":194,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["xs",{"_index":195,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["xxl",{"_index":196,"title":{},"body":{"interfaces/BreakpointConfig.html":{},"injectables/ResponsiveUtility.html":{},"miscellaneous/typealiases.html":{}}}],["yarn",{"_index":1095,"title":{},"body":{"index.html":{}}}],["yes",{"_index":666,"title":{},"body":{"directives/NxIconDirective.html":{},"directives/NxIconDirective-1.html":{}}}],["your.component",{"_index":962,"title":{},"body":{"contributing.html":{}}}],["your.component.html",{"_index":1017,"title":{},"body":{"contributing.html":{}}}],["your.component.mdxrequired",{"_index":1021,"title":{},"body":{"contributing.html":{}}}],["your.component.scss",{"_index":1018,"title":{},"body":{"contributing.html":{}}}],["your.component.spec.ts",{"_index":1019,"title":{},"body":{"contributing.html":{}}}],["your.component.stories.ts",{"_index":1020,"title":{},"body":{"contributing.html":{}}}],["your.component.ts",{"_index":1016,"title":{},"body":{"contributing.html":{}}}],["your_component",{"_index":972,"title":{},"body":{"contributing.html":{}}}],["yourcomponent",{"_index":961,"title":{},"body":{"contributing.html":{}}}],["z",{"_index":399,"title":{},"body":{"components/ButtonComponent-1.html":{},"interfaces/OverlayConfig.html":{},"injectables/OverlayService.html":{}}}],["zindex",{"_index":684,"title":{},"body":{"interfaces/OverlayConfig.html":{}}}],["zone.js",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":564,"title":{},"body":{"modules/IconModule.html":{},"modules/NxIconModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/A11yUtility.html":{"url":"injectables/A11yUtility.html","title":"injectable - A11yUtility","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  A11yUtility\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/a11y.utility.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility service for accessibility features.\nProvides helpers for ARIA attributes, keyboard navigation, focus trapping, and screen reader announcements.\nExample :export class MyComponent {\n  private a11y = inject(A11yUtility);\n\n\n  ngOnInit(): void {\n    const id = this.a11y.generateUniqueId('my-input');\n    this.a11y.setAriaDescribedBy(this.inputElement, id);\n  }\n}\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                announce\n                            \n                            \n                                cleanup\n                            \n                            \n                                createFocusTrap\n                            \n                            \n                                generateUniqueId\n                            \n                            \n                                getFocusableElements\n                            \n                            \n                                isArrowDown\n                            \n                            \n                                isArrowKey\n                            \n                            \n                                isArrowLeft\n                            \n                            \n                                isArrowRight\n                            \n                            \n                                isArrowUp\n                            \n                            \n                                isEnter\n                            \n                            \n                                isEscape\n                            \n                            \n                                isSpace\n                            \n                            \n                                isTab\n                            \n                            \n                                setAriaDescribedBy\n                            \n                            \n                                setAriaExpanded\n                            \n                            \n                                setAriaHidden\n                            \n                            \n                                setAriaLabel\n                            \n                            \n                                setAriaLabelledBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        announce\n                        \n                    \n                \n            \n            \n                \nannounce(message: string, politeness: AriaPoliteness, duration: number)\n                \n            \n\n\n\n\n            \n                \n                        Announces a message to screen readers using a live region.\nExample :a11y.announce('Item added to cart');\na11y.announce('Error occurred!', 'assertive');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The message to announce\n\n                                            \n                                        \n                                        \n                                                politeness\n                                            \n                                                            AriaPoliteness\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'polite'\n                                            \n\n                                            \n                                                    The politeness level for the announcement (default: 'polite')\n\n                                            \n                                        \n                                        \n                                                duration\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5000\n                                            \n\n                                            \n                                                    How long to keep the message (in ms, default: 5000)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cleanup\n                        \n                    \n                \n            \n            \n                \ncleanup()\n                \n            \n\n\n\n\n            \n                \n                        Cleanup method to remove live region element.\nShould be called when the utility is no longer needed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createFocusTrap\n                        \n                    \n                \n            \n            \n                \ncreateFocusTrap(element: HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Creates a focus trap within an element.\nEnsures focus stays within the element when tabbing.\nExample :const cleanup = a11y.createFocusTrap(modalElement);\n// Later:\ncleanup();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to trap focus within\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                Cleanup function to remove the focus trap\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateUniqueId\n                        \n                    \n                \n            \n            \n                \ngenerateUniqueId(prefix: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates a unique ID with an optional prefix.\nUseful for creating ARIA relationships (aria-labelledby, aria-describedby, etc.).\nExample :const id = a11y.generateUniqueId('input'); // Returns 'input-1', 'input-2', etc.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'nx'\n                                            \n\n                                            \n                                                    Optional prefix for the ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A unique ID string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFocusableElements\n                        \n                    \n                \n            \n            \n                \ngetFocusableElements(container: HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Gets all focusable elements within a container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The container element\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HTMLElement[]\n\n                        \n                            \n                                Array of focusable elements\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArrowDown\n                        \n                    \n                \n            \n            \n                \nisArrowDown(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the ArrowDown key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is ArrowDown\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArrowKey\n                        \n                    \n                \n            \n            \n                \nisArrowKey(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is any arrow key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is an arrow key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArrowLeft\n                        \n                    \n                \n            \n            \n                \nisArrowLeft(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the ArrowLeft key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is ArrowLeft\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArrowRight\n                        \n                    \n                \n            \n            \n                \nisArrowRight(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the ArrowRight key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is ArrowRight\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArrowUp\n                        \n                    \n                \n            \n            \n                \nisArrowUp(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the ArrowUp key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is ArrowUp\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnter\n                        \n                    \n                \n            \n            \n                \nisEnter(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the Enter key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is the Enter key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEscape\n                        \n                    \n                \n            \n            \n                \nisEscape(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the Escape key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is the Escape key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSpace\n                        \n                    \n                \n            \n            \n                \nisSpace(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the Space key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is the Space key\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTab\n                        \n                    \n                \n            \n            \n                \nisTab(event: KeyboardEvent)\n                \n            \n\n\n\n\n            \n                \n                        Checks if a keyboard event is the Tab key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The keyboard event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the event is Tab\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAriaDescribedBy\n                        \n                    \n                \n            \n            \n                \nsetAriaDescribedBy(element: HTMLElement, ids: string | string[])\n                \n            \n\n\n\n\n            \n                \n                        Sets the aria-describedby attribute on an element.\nExample :a11y.setAriaDescribedBy(inputElement, 'hint-1 error-1');\n// or\na11y.setAriaDescribedBy(inputElement, ['hint-1', 'error-1']);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to set the attribute on\n\n                                            \n                                        \n                                        \n                                                ids\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Space-separated IDs or array of IDs\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAriaExpanded\n                        \n                    \n                \n            \n            \n                \nsetAriaExpanded(element: HTMLElement, expanded: boolean)\n                \n            \n\n\n\n\n            \n                \n                        Sets the aria-expanded attribute on an element.\nExample :a11y.setAriaExpanded(dropdownButton, isOpen);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to set the attribute on\n\n                                            \n                                        \n                                        \n                                                expanded\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the element is expanded\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAriaHidden\n                        \n                    \n                \n            \n            \n                \nsetAriaHidden(element: HTMLElement, hidden: boolean)\n                \n            \n\n\n\n\n            \n                \n                        Sets the aria-hidden attribute on an element.\nExample :a11y.setAriaHidden(decorativeIcon, true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to set the attribute on\n\n                                            \n                                        \n                                        \n                                                hidden\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the element is hidden\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAriaLabel\n                        \n                    \n                \n            \n            \n                \nsetAriaLabel(element: HTMLElement, label: string | null)\n                \n            \n\n\n\n\n            \n                \n                        Sets the aria-label attribute on an element.\nExample :a11y.setAriaLabel(closeButton, 'Close dialog');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to set the attribute on\n\n                                            \n                                        \n                                        \n                                                label\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The label text\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAriaLabelledBy\n                        \n                    \n                \n            \n            \n                \nsetAriaLabelledBy(element: HTMLElement, ids: string | string[])\n                \n            \n\n\n\n\n            \n                \n                        Sets the aria-labelledby attribute on an element.\nExample :a11y.setAriaLabelledBy(modalElement, 'modal-title');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to set the attribute on\n\n                                            \n                                        \n                                        \n                                                ids\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Space-separated IDs or array of IDs\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BreakpointConfig.html":{"url":"interfaces/BreakpointConfig.html","title":"interface - BreakpointConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BreakpointConfig\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/responsive.utility.ts\n        \n\n\n            \n                Description\n            \n            \n                Breakpoint configuration with pixel values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lg\n                                        \n                                \n                                \n                                        \n                                            md\n                                        \n                                \n                                \n                                        \n                                            sm\n                                        \n                                \n                                \n                                        \n                                            xl\n                                        \n                                \n                                \n                                        \n                                            xs\n                                        \n                                \n                                \n                                        \n                                            xxl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lg:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        md\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        md:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sm:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xxl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xxl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonComponent.html":{"url":"components/ButtonComponent.html","title":"component - ButtonComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  ButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed/src/stories/button.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                storybook-button\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./button.css\n            \n\n\n            \n                template\n                 \n  {{ label }}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                backgroundColor\n                            \n                            \n                                label\n                            \n                            \n                                primary\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    classes\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        backgroundColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        What background color to use\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Button'\n                    \n                \n                \n                    \n                        Button contents\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        primary\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Is this the principal call to action on the page?\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n                \n                    \n                        Type :     \"small\" | \"medium\" | \"large\"\n\n                    \n                \n                \n                    \n                        Default value : 'medium'\n                    \n                \n                \n                    \n                        How large should the button be?\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                \n                    \n                        Optional click handler\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        classes\n                    \n                \n\n                \n                    \n                        getclasses()\n                    \n                \n\n            \n        \n\n\n\n\n\n\n    \n                \n                    ./button.css\n                \n                .storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '   {{ label }}'\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'ButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonComponent-1.html":{"url":"components/ButtonComponent-1.html","title":"component - ButtonComponent-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  ButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed/src/lib/components/button/button.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnChanges\n                AfterViewInit\n                AfterContentInit\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.None\n            \n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                button[nx-button], a[nx-button]\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                NxIconComponent\n                \n            \n\n            \n                styleUrls\n                ./style/button.component.scss\n            \n\n\n            \n                template\n                @if (nxLoading) {\n    \n}\n@if (nxIcon && !nxLoading) {\n    \n}\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                nzIconDirectiveElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                insertSpan\n                            \n                            \n                                ngAfterContentInit\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                danger\n                            \n                            \n                                disabled\n                            \n                            \n                                ghost\n                            \n                            \n                                nxBlock\n                            \n                            \n                                nxIcon\n                            \n                            \n                                nxIconTheme\n                            \n                            \n                                nxLoading\n                            \n                            \n                                nxShape\n                            \n                            \n                                nxSize\n                            \n                            \n                                nxVariant\n                            \n                            \n                                tabIndex\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    iconOnly\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        danger\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghost\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxBlock\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxIcon\n                    \n                \n                \n                    \n                        Type :         string | IconDefinition\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxIconTheme\n                    \n                \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxShape\n                    \n                \n                \n                    \n                        Type :         NxButtonShapes\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxSize\n                    \n                \n                \n                    \n                        Type :         NxButtonSizes\n\n                    \n                \n                \n                    \n                        Default value : 'default'\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxVariant\n                    \n                \n                \n                    \n                        Type :         NxButtonVariants\n\n                    \n                \n                \n                    \n                        Default value : 'primary'\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tabIndex\n                    \n                \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        insertSpan\n                        \n                    \n                \n            \n            \n                \ninsertSpan(nodes: NodeList, renderer: Renderer2)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodes\n                                            \n                                                        NodeList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                renderer\n                                            \n                                                        Renderer2\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterContentInit\n                        \n                    \n                \n            \n            \n                \nngAfterContentInit()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nzIconDirectiveElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild(NxIconDirective, {read: ElementRef})\n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        iconOnly\n                    \n                \n\n                \n                    \n                        geticonOnly()\n                    \n                \n\n            \n        \n\n\n\n\n\n\n    \n                \n                    ./style/button.component.scss\n                \n                // =============================================================================\n// UNNAMED UI - Button Component Styles\n// =============================================================================\n// Use @import instead of @use to avoid module scope conflicts when imported into global.scss\n\n@import '../../../style/themes';\n@import '../../../style/mixins';\n\n$btn-prefix-cls: nx-btn;\n\n// Button Base Styles\n.#{$btn-prefix-cls} {\n    @include btn-base();\n\n    // Fix loading button animation\n    > span {\n        display: inline-block;\n    }\n\n    // Icon alignment and spacing\n    .nx-btn-icon {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        vertical-align: middle;\n    }\n\n    // Icon spacing when button has text\n    &-with-icon:not(&-icon-only) {\n        .nx-btn-icon {\n            margin-right: 8px;\n        }\n    }\n\n    // Primary Button\n    &-primary {\n        @include btn-primary();\n    }\n\n    // Secondary Button\n    &-secondary {\n        @include btn-secondary();\n    }\n\n    // Dashed Button\n    &-dashed {\n        @include btn-dashed();\n    }\n\n    // Danger Button\n    &-danger {\n        @include btn-danger();\n    }\n\n    // Outline Button\n    &-outline {\n        @include btn-outline();\n    }\n\n    // Ghost Button\n    &-ghost {\n        @include btn-ghost();\n    }\n\n    // Link Button\n    &-link {\n        @include btn-link();\n    }\n\n    // Round Shape\n    &-round {\n        @include btn-round();\n    }\n\n    // Circle Shape\n    &-circle {\n        @include btn-circle();\n    }\n\n    // Block Layout\n    &-block {\n        @include btn-block();\n    }\n\n    // Loading State\n    &.#{$btn-prefix-cls}-loading {\n        position: relative;\n        cursor: default;\n\n        &::before {\n            position: absolute;\n            top: -$btn-border-width;\n            right: -$btn-border-width;\n            bottom: -$btn-border-width;\n            left: -$btn-border-width;\n            z-index: 1;\n            display: block;\n            background: $component-background;\n            border-radius: inherit;\n            opacity: 0.35;\n            transition: opacity 0.2s;\n            content: '';\n            pointer-events: none;\n        }\n    }\n\n    // Loading Icon\n    .spinner {\n        display: inline-block;\n        width: 14px;\n        height: 14px;\n        margin-right: 8px;\n        border: 2px solid currentColor;\n        border-top-color: transparent;\n        border-radius: 50%;\n        animation: spin 0.6s linear infinite;\n    }\n}\n\n// Link button styles for anchor tags\na.#{$btn-prefix-cls} {\n    padding-top: 0.01px !important;\n    line-height: $btn-height-base - 2px;\n\n    &[disabled] {\n        cursor: not-allowed;\n\n        &,\n        &:hover,\n        &:focus,\n        &:active {\n            color: $btn-disable-color;\n            background: transparent;\n            border-color: transparent;\n            text-shadow: none;\n            box-shadow: none;\n        }\n    }\n\n    &-lg {\n        line-height: $btn-height-lg - 2px;\n    }\n\n    &-sm {\n        line-height: $btn-height-sm - 2px;\n    }\n}\n\n// Loading Spinner Animation\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (nxLoading) {    }@if (nxIcon && !nxLoading) {    }'\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'ButtonComponent-1'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CachedIconDefinition.html":{"url":"interfaces/CachedIconDefinition.html","title":"interface - CachedIconDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CachedIconDefinition\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            theme\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     SVGElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SVGElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        theme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        theme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ControlValueAccessorBase.html":{"url":"classes/ControlValueAccessorBase.html","title":"class - ControlValueAccessorBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ControlValueAccessorBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/control-value-accessor-base.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract base class for implementing ControlValueAccessor.\nProvides standard implementation of the CVA interface with helper methods.\nExample :export class CustomInputComponent extends ControlValueAccessorBase {\n  onInput(event: Event): void {\n    const value = (event.target as HTMLInputElement).value;\n    this.emitChange(value);\n  }\n\n\n  onBlur(): void {\n    this.markAsTouched();\n  }\n}\n            \n\n\n            \n                Implements\n            \n            \n                        ControlValueAccessor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                disabled\n                            \n                            \n                                    Protected\n                                onChange\n                            \n                            \n                                    Protected\n                                onTouched\n                            \n                            \n                                    Protected\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                emitChange\n                            \n                            \n                                    Protected\n                                markAsTouched\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n            \n                \n                    Whether the control is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n            \n                \n                    Callback function to notify Angular forms of value changes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onTouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n            \n                \n                    Callback function to notify Angular forms that the control was touched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n\n            \n                \n                    The current value of the control\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        emitChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitChange(value: T | null)\n                \n            \n\n\n\n\n            \n                \n                        Helper method to emit value changes to Angular forms.\nCall this when the control's value changes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value to emit\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsTouched()\n                \n            \n\n\n\n\n            \n                \n                        Helper method to mark the control as touched.\nCall this when the control loses focus or when user interaction occurs.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: (value: T | null) => void)\n                \n            \n\n\n\n\n            \n                \n                        Registers a callback function that should be called when the control's value changes in the UI.\nPart of the ControlValueAccessor interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The callback function to register\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: () => void)\n                \n            \n\n\n\n\n            \n                \n                        Registers a callback function that should be called when the control is touched.\nPart of the ControlValueAccessor interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The callback function to register\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n\n\n            \n                \n                        Sets the disabled state of the control.\nPart of the ControlValueAccessor interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the control should be disabled\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: T | null)\n                \n            \n\n\n\n\n            \n                \n                        Writes a new value to the element.\nPart of the ControlValueAccessor interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value for the control\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FocusMonitor.html":{"url":"injectables/FocusMonitor.html","title":"injectable - FocusMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  FocusMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/focus-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for monitoring and managing focus states on elements.\nProvides focus origin detection and focus management utilities.\nExample :export class MyComponent implements OnDestroy {\n  private focusMonitor = inject(FocusMonitor);\n\n\n  ngAfterViewInit(): void {\n    this.focusMonitor.monitor(this.elementRef).subscribe(origin => {\n      console.log('Element focused via:', origin);\n    });\n  }\n\n\n  ngOnDestroy(): void {\n    this.focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusVia\n                            \n                            \n                                getFocusOrigin\n                            \n                            \n                                isFocusWithin\n                            \n                            \n                                monitor\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                stopMonitoring\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusVia\n                        \n                    \n                \n            \n            \n                \nfocusVia(element: HTMLElement, origin: FocusOrigin)\n                \n            \n\n\n\n\n            \n                \n                        Focuses an element and sets the focus origin.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The HTML element to focus\n\n                                            \n                                        \n                                        \n                                                origin\n                                            \n                                                            FocusOrigin\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The origin to attribute the focus to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFocusOrigin\n                        \n                    \n                \n            \n            \n                \ngetFocusOrigin(element: ElementRef | HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Gets the current focus origin for a monitored element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        ElementRef | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to check\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FocusOrigin\n\n                        \n                            \n                                The current focus origin or null if not monitored/focused\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFocusWithin\n                        \n                    \n                \n            \n            \n                \nisFocusWithin(element: Element)\n                \n            \n\n\n\n\n            \n                \n                        Checks if focus is currently within the specified element or its descendants.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        Element\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to check\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if focus is within the element\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        monitor\n                        \n                    \n                \n            \n            \n                \nmonitor(element: ElementRef | HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Monitors focus on the specified element and returns an Observable of focus origins.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        ElementRef | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element or ElementRef to monitor\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that emits focus origin when the element receives focus\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                        Clean up when service is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopMonitoring\n                        \n                    \n                \n            \n            \n                \nstopMonitoring(element: ElementRef | HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Stops monitoring focus on the specified element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                        ElementRef | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element or ElementRef to stop monitoring\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FocusMonitorData.html":{"url":"interfaces/FocusMonitorData.html","title":"interface - FocusMonitorData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FocusMonitorData\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/focus-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents focus monitoring data for an element.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            origin\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        origin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        origin:         FocusOrigin\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FocusOrigin\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         Subject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Subject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed/src/stories/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                storybook-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ButtonComponent\n                \n            \n\n            \n                styleUrls\n                ./header.css\n            \n\n\n            \n                template\n                  \n    \n      \n        \n          \n          \n          \n        \n      \n      Acme\n    \n    \n      \n        \n          Welcome, {{ user.name }}!\n        \n        \n      \n      \n        \n        \n      \n    \n  \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onCreateAccount\n                            \n                            \n                                onLogin\n                            \n                            \n                                onLogout\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n                \n                    \n                        Type :         User | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onCreateAccount\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        onLogin\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        onLogout\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n                \n                    ./header.css\n                \n                .storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                      Acme                                Welcome, {{ user.name }}!                                                        '\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IconDefinition.html":{"url":"interfaces/IconDefinition.html","title":"interface - IconDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IconDefinition\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            theme\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        theme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        theme:         ThemeType | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ThemeType | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IconModule.html":{"url":"modules/IconModule.html","title":"module - IconModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    IconModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IconModule\n\n\n\ncluster_IconModule_imports\n\n\n\ncluster_IconModule_exports\n\n\n\n\nNxIconComponent\n\nNxIconComponent\n\n\n\nIconModule\n\nIconModule\n\nIconModule -->\n\nNxIconComponent->IconModule\n\n\n\n\n\nNxIconDirective\n\nNxIconDirective\n\nIconModule -->\n\nNxIconDirective->IconModule\n\n\n\n\n\nNxIconComponent \n\nNxIconComponent \n\nNxIconComponent  -->\n\nIconModule->NxIconComponent \n\n\n\n\n\nNxIconDirective \n\nNxIconDirective \n\nNxIconDirective  -->\n\nIconModule->NxIconDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/component/icon.module.ts\n        \n\n\n            \n                Deprecated\n            \n            \n                Use standalone NxIconComponent instead, or use provideNxIcons() in app config\n            \n\n        \n            Description\n        \n        \n            Icon module that exports icon component and directive.\nFor standalone usage, import NxIconComponent directly instead.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NxIconComponent\n                        \n                        \n                            NxIconDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NxIconComponent\n                        \n                        \n                            NxIconDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IconService.html":{"url":"injectables/IconService.html","title":"injectable - IconService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  IconService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/component/icon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _assetsUrlRoot\n                            \n                            \n                                    Protected\n                                _http\n                            \n                            \n                                    Protected\n                                _inProgressFetches\n                            \n                            \n                                    Protected\n                                _renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                _svgDefinitions\n                            \n                            \n                                    Protected\n                                    Readonly\n                                _svgRenderedDefinitions\n                            \n                            \n                                defaultTheme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _createSVGElementFromString\n                            \n                            \n                                    Protected\n                                _loadIconDynamically\n                            \n                            \n                                    Protected\n                                _loadIconDynamicallyWithJsonp\n                            \n                            \n                                    Protected\n                                _loadSVGFromCacheOrCreateNew\n                            \n                            \n                                    Protected\n                                _setSVGAttribute\n                            \n                            \n                                addIcon\n                            \n                            \n                                addIconLiteral\n                            \n                            \n                                changeAssetsSource\n                            \n                            \n                                clear\n                            \n                            \n                                getCachedIcons\n                            \n                            \n                                getRenderedContent\n                            \n                            \n                                useJsonpLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    disableDynamicLoading\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_rendererFactory: RendererFactory2, _handler: HttpBackend, _document: any, sanitizer: DomSanitizer, _nxIcons: IconDefinition[])\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _rendererFactory\n                                                  \n                                                        \n                                                                    RendererFactory2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _handler\n                                                  \n                                                        \n                                                                    HttpBackend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _document\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _nxIcons\n                                                  \n                                                        \n                                                                        IconDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _createSVGElementFromString\n                        \n                    \n                \n            \n            \n                \n                        \n                    _createSVGElementFromString(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadIconDynamically\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadIconDynamically(type: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadIconDynamicallyWithJsonp\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadIconDynamicallyWithJsonp(icon: IconDefinition, url: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadSVGFromCacheOrCreateNew\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadSVGFromCacheOrCreateNew(icon: IconDefinition)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _setSVGAttribute\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setSVGAttribute(svg: SVGElement)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                svg\n                                            \n                                                        SVGElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addIcon\n                        \n                    \n                \n            \n            \n                \naddIcon(icons: IconDefinition[])\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icons\n                                            \n                                                            IconDefinition[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addIconLiteral\n                        \n                    \n                \n            \n            \n                \naddIconLiteral(type: string, literal: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                literal\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeAssetsSource\n                        \n                    \n                \n            \n            \n                \nchangeAssetsSource(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCachedIcons\n                        \n                    \n                \n            \n            \n                \ngetCachedIcons()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         Map\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderedContent\n                        \n                    \n                \n            \n            \n                \ngetRenderedContent(icon: IconDefinition | string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useJsonpLoading\n                        \n                    \n                \n            \n            \n                \nuseJsonpLoading()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _assetsUrlRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient | undefined\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _inProgressFetches\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        _svgDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        _svgRenderedDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultTheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n                \n                    \n                        Default value : 'outline'\n                    \n                \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disableDynamicLoading\n                    \n                \n\n                \n                    \n                        getdisableDynamicLoading()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IconService-1.html":{"url":"injectables/IconService-1.html","title":"injectable - IconService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  IconService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/components/icon/icon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _assetsUrlRoot\n                            \n                            \n                                    Protected\n                                _http\n                            \n                            \n                                    Protected\n                                _inProgressFetches\n                            \n                            \n                                    Protected\n                                _renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                _svgDefinitions\n                            \n                            \n                                    Protected\n                                    Readonly\n                                _svgRenderedDefinitions\n                            \n                            \n                                defaultTheme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _createSVGElementFromString\n                            \n                            \n                                    Protected\n                                _loadIconDynamically\n                            \n                            \n                                    Protected\n                                _loadIconDynamicallyWithJsonp\n                            \n                            \n                                    Protected\n                                _loadSVGFromCacheOrCreateNew\n                            \n                            \n                                    Protected\n                                _setSVGAttribute\n                            \n                            \n                                addIcon\n                            \n                            \n                                addIconLiteral\n                            \n                            \n                                changeAssetsSource\n                            \n                            \n                                clear\n                            \n                            \n                                getCachedIcons\n                            \n                            \n                                getRenderedContent\n                            \n                            \n                                useJsonpLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    disableDynamicLoading\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_rendererFactory: RendererFactory2, _handler: HttpBackend, _document: any, sanitizer: DomSanitizer, _nxIcons: IconDefinition[])\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _rendererFactory\n                                                  \n                                                        \n                                                                    RendererFactory2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _handler\n                                                  \n                                                        \n                                                                    HttpBackend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _document\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _nxIcons\n                                                  \n                                                        \n                                                                        IconDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _createSVGElementFromString\n                        \n                    \n                \n            \n            \n                \n                        \n                    _createSVGElementFromString(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadIconDynamically\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadIconDynamically(type: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadIconDynamicallyWithJsonp\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadIconDynamicallyWithJsonp(icon: IconDefinition, url: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _loadSVGFromCacheOrCreateNew\n                        \n                    \n                \n            \n            \n                \n                        \n                    _loadSVGFromCacheOrCreateNew(icon: IconDefinition)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _setSVGAttribute\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setSVGAttribute(svg: SVGElement)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                svg\n                                            \n                                                        SVGElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SVGElement\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addIcon\n                        \n                    \n                \n            \n            \n                \naddIcon(icons: IconDefinition[])\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icons\n                                            \n                                                            IconDefinition[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addIconLiteral\n                        \n                    \n                \n            \n            \n                \naddIconLiteral(type: string, literal: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                literal\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeAssetsSource\n                        \n                    \n                \n            \n            \n                \nchangeAssetsSource(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCachedIcons\n                        \n                    \n                \n            \n            \n                \ngetCachedIcons()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         Map\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderedContent\n                        \n                    \n                \n            \n            \n                \ngetRenderedContent(icon: IconDefinition | string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icon\n                                            \n                                                            IconDefinition | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        useJsonpLoading\n                        \n                    \n                \n            \n            \n                \nuseJsonpLoading()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _assetsUrlRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient | undefined\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _inProgressFetches\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        _svgDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        _svgRenderedDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultTheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n                \n                    \n                        Default value : 'outline'\n                    \n                \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disableDynamicLoading\n                    \n                \n\n                \n                    \n                        getdisableDynamicLoading()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/InputDirective.html":{"url":"directives/InputDirective.html","title":"directive - InputDirective","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Directives\n  InputDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/components/input/input.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        input[nx-input],textarea[nx-input]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        nxInput\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                controlDisabled\n                            \n                            \n                                    Readonly\n                                finalDisabled\n                            \n                            \n                                    Readonly\n                                ngControl\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                nxSize\n                            \n                            \n                                nxStatus\n                            \n                            \n                                nxVariant\n                            \n                            \n                                readonly\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false, { transform: booleanAttribute }\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxSize\n                    \n                \n                \n                    \n                        Type :         NxInputSize\n\n                    \n                \n                \n                    \n                        Default value : 'default'\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxStatus\n                    \n                \n                \n                    \n                        Type :         NxInputStatus\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        nxVariant\n                    \n                \n                \n                    \n                        Type :         NxInputVariant\n\n                    \n                \n                \n                    \n                        Default value : 'outlined'\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        readonly\n                    \n                \n                \n                    \n                        Default value : false, { transform: booleanAttribute }\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        controlDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        finalDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.ngControl ? this.controlDisabled : this.disabled\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ngControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgControl, { self: true, optional: true })\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(this.elementRef.nativeElement.value)\n                    \n                \n\n\n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Manifest.html":{"url":"interfaces/Manifest.html","title":"interface - Manifest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Manifest\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fill\n                                        \n                                \n                                \n                                        \n                                            outline\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fill:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outline\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outline:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NxIconComponent.html":{"url":"components/NxIconComponent.html","title":"component - NxIconComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  NxIconComponent\n\n\n\n        \n            Info\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed-icons/src/component/icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        Icon component that wraps the NxIconDirective for easier usage.\nThis is a standalone component that can be used directly without imports.\nExample :import { NxIconComponent } from 'ngx-unnamed-icons';\nimport { HeartStraightOutline } from 'ngx-unnamed-icons';\n\n\n@Component({\n  template: ``\n})\nexport class MyComponent {\n  HeartStraightOutline = HeartStraightOutline;\n}\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.None\n            \n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nx-icon\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NxIconDirective\n                \n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n                \n                    \n                        Icon theme - outline, fill, or twotone\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string | IconDefinition\n\n                    \n                \n                \n                    \n                        Icon type - can be a string name or IconDefinition object\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'NxIconComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NxIconComponent-1.html":{"url":"components/NxIconComponent-1.html","title":"component - NxIconComponent-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  NxIconComponent\n\n\n\n        \n            Info\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed/src/lib/components/icon/icon.component.ts\n\n\n\n    \n        Description\n    \n    \n        Icon component that wraps the NxIconDirective for easier usage.\nThis is a standalone component that can be used directly without imports.\nExample :import { NxIconComponent } from 'ngx-unnamed-icons';\nimport { HeartStraightOutline } from 'ngx-unnamed-icons';\n\n\n@Component({\n  template: ``\n})\nexport class MyComponent {\n  HeartStraightOutline = HeartStraightOutline;\n}\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.None\n            \n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nx-icon\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NxIconDirective\n                \n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n                \n                    \n                        Icon theme - outline, fill, or twotone\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string | IconDefinition\n\n                    \n                \n                \n                    \n                        Icon type - can be a string name or IconDefinition object\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'NxIconComponent-1'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NxIconDirective.html":{"url":"directives/NxIconDirective.html","title":"directive - NxIconDirective","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Directives\n  NxIconDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/component/icon.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nxIcon]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _changeIcon\n                            \n                            \n                                    Protected\n                                _clearSVGElement\n                            \n                            \n                                    Protected\n                                _getSelfRenderMeta\n                            \n                            \n                                    Protected\n                                _parseIconType\n                            \n                            \n                                    Protected\n                                _setSVGElement\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_iconService: IconService, _elementRef: ElementRef, _renderer: Renderer2)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _iconService\n                                                  \n                                                        \n                                                                        IconService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string | IconDefinition\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _changeIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    _changeIcon()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _clearSVGElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    _clearSVGElement()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _getSelfRenderMeta\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getSelfRenderMeta()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         RenderMeta\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _parseIconType\n                        \n                    \n                \n            \n            \n                \n                        \n                    _parseIconType(type: string | IconDefinition, theme?: ThemeType)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string | IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                theme\n                                            \n                                                            ThemeType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IconDefinition | string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _setSVGElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setSVGElement(svg: SVGElement)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                svg\n                                            \n                                                        SVGElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NxIconDirective-1.html":{"url":"directives/NxIconDirective-1.html","title":"directive - NxIconDirective-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Directives\n  NxIconDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/components/icon/icon.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nxIcon]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _changeIcon\n                            \n                            \n                                    Protected\n                                _clearSVGElement\n                            \n                            \n                                    Protected\n                                _getSelfRenderMeta\n                            \n                            \n                                    Protected\n                                _parseIconType\n                            \n                            \n                                    Protected\n                                _setSVGElement\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_iconService: IconService, _elementRef: ElementRef, _renderer: Renderer2)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _iconService\n                                                  \n                                                        \n                                                                        IconService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :         ThemeType\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string | IconDefinition\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _changeIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    _changeIcon()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _clearSVGElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    _clearSVGElement()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _getSelfRenderMeta\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getSelfRenderMeta()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         RenderMeta\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _parseIconType\n                        \n                    \n                \n            \n            \n                \n                        \n                    _parseIconType(type: string | IconDefinition, theme?: ThemeType)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string | IconDefinition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                theme\n                                            \n                                                            ThemeType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IconDefinition | string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _setSVGElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    _setSVGElement(svg: SVGElement)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                svg\n                                            \n                                                        SVGElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NxIconModule.html":{"url":"modules/NxIconModule.html","title":"module - NxIconModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    NxIconModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NxIconModule\n\n\n\ncluster_NxIconModule_imports\n\n\n\n\nNxIconComponent\n\nNxIconComponent\n\n\n\nNxIconModule\n\nNxIconModule\n\nNxIconModule -->\n\nNxIconComponent->NxIconModule\n\n\n\n\n\nNxIconDirective\n\nNxIconDirective\n\nNxIconModule -->\n\nNxIconDirective->NxIconModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/components/icon/icon.module.ts\n        \n\n\n            \n                Deprecated\n            \n            \n                Use standalone NxIconComponent instead, or use provideNxIcons() in app config\n            \n\n        \n            Description\n        \n        \n            Icon module that exports icon component and directive.\nFor standalone usage, import NxIconComponent directly instead.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NxIconComponent\n                        \n                        \n                            NxIconDirective\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(icons: IconDefinition[])\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                icons\n                                            \n                                                            IconDefinition[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverlayConfig.html":{"url":"interfaces/OverlayConfig.html","title":"interface - OverlayConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OverlayConfig\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/overlay.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for overlay positioning.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoReposition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                        \n                                            placement\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoReposition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoReposition:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to automatically reposition on collision\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Offset from the trigger element in pixels\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placement:         OverlayPlacement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverlayPlacement\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The preferred placement of the overlay\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Z-index for the overlay\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverlayData.html":{"url":"interfaces/OverlayData.html","title":"interface - OverlayData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OverlayData\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/overlay.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Registered overlay data for tracking.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            overlayElement\n                                        \n                                \n                                \n                                        \n                                            triggerElement\n                                        \n                                \n                                \n                                        \n                                            updatePosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         Required\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Required\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overlayElement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        overlayElement:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        triggerElement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        triggerElement:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatePosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatePosition:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverlayPosition.html":{"url":"interfaces/OverlayPosition.html","title":"interface - OverlayPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OverlayPosition\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/overlay.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Position coordinates for an overlay.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            left\n                                        \n                                \n                                \n                                        \n                                            placement\n                                        \n                                \n                                \n                                        \n                                            top\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placement:         OverlayPlacement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverlayPlacement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayService.html":{"url":"injectables/OverlayService.html","title":"injectable - OverlayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/overlay.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for positioning and managing overlays (dropdowns, popovers, tooltips).\nProvides automatic repositioning on scroll/resize and collision detection.\nExample :export class DropdownComponent {\n  private overlayService = inject(OverlayService);\n\n\n  showDropdown(): void {\n    const position = this.overlayService.calculatePosition(\n      this.triggerElement,\n      this.dropdownElement,\n      { placement: 'bottom', autoReposition: true }\n    );\n    this.overlayService.applyPosition(this.dropdownElement, position);\n  }\n}\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyPosition\n                            \n                            \n                                calculatePosition\n                            \n                            \n                                getNextZIndex\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                register\n                            \n                            \n                                unregister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyPosition\n                        \n                    \n                \n            \n            \n                \napplyPosition(overlayElement: HTMLElement, position: OverlayPosition)\n                \n            \n\n\n\n\n            \n                \n                        Applies the calculated position to an overlay element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                overlayElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The overlay element to position\n\n                                            \n                                        \n                                        \n                                                position\n                                            \n                                                            OverlayPosition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The position to apply\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        calculatePosition\n                        \n                    \n                \n            \n            \n                \ncalculatePosition(triggerElement: HTMLElement, overlayElement: HTMLElement, config: OverlayConfig)\n                \n            \n\n\n\n\n            \n                \n                        Calculates the optimal position for an overlay relative to a trigger element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                triggerElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element that triggers the overlay\n\n                                            \n                                        \n                                        \n                                                overlayElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The overlay element to position\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            OverlayConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuration for positioning\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OverlayPosition\n\n                        \n                            \n                                The calculated position coordinates\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNextZIndex\n                        \n                    \n                \n            \n            \n                \ngetNextZIndex()\n                \n            \n\n\n\n\n            \n                \n                        Gets the next available z-index value.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The next z-index value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                        Cleans up resources on destroy.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(triggerElement: HTMLElement, overlayElement: HTMLElement, config: OverlayConfig)\n                \n            \n\n\n\n\n            \n                \n                        Registers an overlay for automatic position updates on scroll/resize.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                triggerElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The trigger element\n\n                                            \n                                        \n                                        \n                                                overlayElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The overlay element\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            OverlayConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuration for positioning\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unregister\n                        \n                    \n                \n            \n            \n                \nunregister(overlayElement: HTMLElement)\n                \n            \n\n\n\n\n            \n                \n                        Unregisters an overlay to stop automatic updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                overlayElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The overlay element to unregister\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageComponent.html":{"url":"components/PageComponent.html","title":"component - PageComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  PageComponent\n\n\n\n        \n            Info\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-unnamed/src/stories/page.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                storybook-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                HeaderComponent\n                \n            \n\n            \n                styleUrls\n                ./page.css\n            \n\n\n            \n                template\n                  \n  \n    Pages in Storybook\n    \n      We recommend building UIs with a\n      \n        component-driven\n      \n      process starting with atomic components and ending with pages.\n    \n    \n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    \n    \n      \n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      \n      \n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      \n    \n    \n      Get a guided tutorial on component-driven development at\n      \n        Storybook tutorials\n      \n      . Read more in the\n       docs \n      .\n    \n    \n      Tip Adjust the width of the canvas with the\n      \n        \n          \n        \n      \n      Viewports addon in the toolbar\n    \n  \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                doCreateAccount\n                            \n                            \n                                doLogin\n                            \n                            \n                                doLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        doCreateAccount\n                        \n                    \n                \n            \n            \n                \ndoCreateAccount()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doLogin\n                        \n                    \n                \n            \n            \n                \ndoLogin()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doLogout\n                        \n                    \n                \n            \n            \n                \ndoLogout()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n    \n                \n                    ./page.css\n                \n                .storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Pages in Storybook          We recommend building UIs with a              component-driven            process starting with atomic components and ending with pages.              Render pages with mock data. This makes it easy to build and review page states without      needing to navigate to them in your app. Here are some handy patterns for managing page data      in Storybook:                      Use a higher-level connected component. Storybook helps you compose such data from the        \"args\" of child component stories                    Assemble data in the page component from your services. You can mock these services out        using Storybook.                    Get a guided tutorial on component-driven development at              Storybook tutorials            . Read more in the       docs       .              Tip Adjust the width of the canvas with the                                            Viewports addon in the toolbar      '\n    var COMPONENTS = [{'name': 'ButtonComponent', 'selector': 'storybook-button'},{'name': 'ButtonComponent', 'selector': 'button[nx-button], a[nx-button]'},{'name': 'HeaderComponent', 'selector': 'storybook-header'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'NxIconComponent', 'selector': 'nx-icon'},{'name': 'PageComponent', 'selector': 'storybook-page'}];\n    var DIRECTIVES = [{'name': 'InputDirective', 'selector': 'input[nx-input],textarea[nx-input]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'},{'name': 'NxIconDirective', 'selector': '[nxIcon]'}];\n    var ACTUAL_COMPONENT = {'name': 'PageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderMeta.html":{"url":"interfaces/RenderMeta.html","title":"interface - RenderMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderMeta\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed-icons/src/component/icon.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            theme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            twoToneColor\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        theme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        theme:         ThemeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ThemeType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        twoToneColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        twoToneColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string | IconDefinition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string | IconDefinition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderMeta-1.html":{"url":"interfaces/RenderMeta-1.html","title":"interface - RenderMeta-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderMeta\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/components/icon/icon.directive.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            theme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            twoToneColor\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        theme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        theme:         ThemeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ThemeType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        twoToneColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        twoToneColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string | IconDefinition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string | IconDefinition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponsiveUtility.html":{"url":"injectables/ResponsiveUtility.html","title":"injectable - ResponsiveUtility","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponsiveUtility\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/lib/utils/responsive.utility.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for responsive breakpoint detection and management.\nProvides observables for tracking viewport size changes and current breakpoint.\nExample :export class MyComponent implements OnInit {\n  private responsiveUtility = inject(ResponsiveUtility);\n\n\n  ngOnInit(): void {\n    this.responsiveUtility.currentBreakpoint$.subscribe(breakpoint => {\n      console.log('Current breakpoint:', breakpoint);\n    });\n\n\n    if (this.responsiveUtility.isBreakpoint('md')) {\n      // Show desktop layout\n    }\n  }\n}\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                currentBreakpoint$\n                            \n                            \n                                    Public\n                                    Readonly\n                                windowWidth$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBreakpointConfig\n                            \n                            \n                                getCurrentBreakpoint\n                            \n                            \n                                getWindowHeight\n                            \n                            \n                                getWindowWidth\n                            \n                            \n                                isBetweenBreakpoints\n                            \n                            \n                                isBreakpoint\n                            \n                            \n                                isBreakpointOrLarger\n                            \n                            \n                                isBreakpointOrSmaller\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                observeBreakpoint\n                            \n                            \n                                observeBreakpointOrLarger\n                            \n                            \n                                observeBreakpointOrSmaller\n                            \n                            \n                                setBreakpointConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getBreakpointConfig\n                        \n                    \n                \n            \n            \n                \ngetBreakpointConfig()\n                \n            \n\n\n\n\n            \n                \n                        Gets the breakpoint configuration.\n\n\n                        \n                            Returns :         Readonly\n\n                        \n                            \n                                The current breakpoint configuration\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentBreakpoint\n                        \n                    \n                \n            \n            \n                \ngetCurrentBreakpoint()\n                \n            \n\n\n\n\n            \n                \n                        Gets the current breakpoint synchronously.\n\n\n                        \n                            Returns :         Breakpoint\n\n                        \n                            \n                                The current breakpoint\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWindowHeight\n                        \n                    \n                \n            \n            \n                \ngetWindowHeight()\n                \n            \n\n\n\n\n            \n                \n                        Gets the current window height.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The current window height in pixels\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWindowWidth\n                        \n                    \n                \n            \n            \n                \ngetWindowWidth()\n                \n            \n\n\n\n\n            \n                \n                        Gets the current window width.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The current window width in pixels\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBetweenBreakpoints\n                        \n                    \n                \n            \n            \n                \nisBetweenBreakpoints(min: Breakpoint, max: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Checks if the current viewport width falls between two breakpoints.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The minimum breakpoint (inclusive)\n\n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The maximum breakpoint (inclusive)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if current breakpoint is between min and max\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBreakpoint\n                        \n                    \n                \n            \n            \n                \nisBreakpoint(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Checks if the current viewport matches the specified breakpoint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The breakpoint to check\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the current viewport matches the breakpoint\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBreakpointOrLarger\n                        \n                    \n                \n            \n            \n                \nisBreakpointOrLarger(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Checks if the current viewport is at least the specified breakpoint.\nFor example, isBreakpointOrLarger('md') returns true for md, lg, xl, and xxl.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The minimum breakpoint\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if current breakpoint is equal to or larger than specified\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBreakpointOrSmaller\n                        \n                    \n                \n            \n            \n                \nisBreakpointOrSmaller(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Checks if the current viewport is at most the specified breakpoint.\nFor example, isBreakpointOrSmaller('md') returns true for xs, sm, and md.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The maximum breakpoint\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if current breakpoint is equal to or smaller than specified\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                        Cleans up resources on destroy.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeBreakpoint\n                        \n                    \n                \n            \n            \n                \nobserveBreakpoint(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Observes a specific breakpoint and emits when it becomes active or inactive.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The breakpoint to observe\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that emits true when breakpoint is active, false otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeBreakpointOrLarger\n                        \n                    \n                \n            \n            \n                \nobserveBreakpointOrLarger(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Observes whether viewport is at least the specified breakpoint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The minimum breakpoint to observe\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that emits true when viewport is at least the breakpoint\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeBreakpointOrSmaller\n                        \n                    \n                \n            \n            \n                \nobserveBreakpointOrSmaller(breakpoint: Breakpoint)\n                \n            \n\n\n\n\n            \n                \n                        Observes whether viewport is at most the specified breakpoint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                            Breakpoint\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The maximum breakpoint to observe\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that emits true when viewport is at most the breakpoint\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setBreakpointConfig\n                        \n                    \n                \n            \n            \n                \nsetBreakpointConfig(config: Partial)\n                \n            \n\n\n\n\n            \n                \n                        Updates the breakpoint configuration.\nUse this to customize breakpoints for your application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Partial breakpoint configuration to merge with defaults\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentBreakpoint$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n\n            \n                \n                    Observable of the current breakpoint\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        windowWidth$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n\n            \n                \n                    Observable of the current window width\n\n                \n            \n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestConfig.html":{"url":"interfaces/TestConfig.html","title":"interface - TestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TestConfig\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/test-utils/component-test-helpers.ts\n        \n\n\n            \n                Description\n            \n            \n                Standard test configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetectChanges\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            declarations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            imports\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            providers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            schemas\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetectChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetectChanges:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        declarations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        declarations:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imports\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imports:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        providers:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        schemas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schemas:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-unnamed/src/stories/user.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"contributing - contributing","body":"\n                   \n\n\n\n\nContributing to Unnamed UI\nThank you for your interest in contributing to Unnamed UI! This document provides guidelines for contributing to the project.\nDocumentation Standards\nThis section specifically covers documentation requirements and standards for components.\nWhen to Create Stories vs MDX\nComponent Stories (.stories.ts):\n\nRequired for all new components\nUse when: Component has interactive props, multiple states, or variations\nFocus on: Interactive examples and prop controls\nAuto-generated from component interface\n\nMDX Documentation (.mdx):\n\nRequired for complex components with extensive usage patterns\nUse when: Component needs detailed explanations, examples, or complex documentation\nFocus on: Comprehensive documentation, use cases, accessibility, best practices\nManual creation for rich documentation content\n\nRequired Documentation Sections\nAll component documentation must include the following sections:\n1. Overview\n\nBrief description of the component's purpose\nPrimary use cases and functionality\nKey features and capabilities\n\n2. When to Use\n\nSpecific scenarios where the component is appropriate\nCommon use cases and patterns\nIntegration examples\n\n3. When Not to Use\n\nScenarios where alternative components would be better\nAnti-patterns and common mistakes\nAlternatives to consider\n\n4. Accessibility\n\nARIA attributes and roles\nKeyboard navigation support\nScreen reader compatibility\nColor contrast compliance\nFocus management\n\n5. Best Practices\n\nUsage guidelines and patterns\nPerformance considerations\nStyling recommendations\nCommon pitfalls to avoid\n\n6. Examples\n\nBasic usage examples\nAdvanced use cases\nIntegration patterns\nReal-world scenarios\n\n7. API Reference\n\nComplete props documentation\nEvent handlers\nPublic methods\nTypeScript interfaces\n\n8. Related Components\n\nLinks to related components\nUsage in component combinations\nAlternative components\n\nCode Example Format and Style\nTypeScript Stories Format\nExample :import type { Meta, StoryObj } from '@storybook/angular';\nimport { YourComponent } from './your.component';\n\nconst meta: Meta = {\n  title: 'Components/YourComponent',\n  component: YourComponent,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Brief component description here...',\n      },\n    },\n  },\n  argTypes: {\n    // Define interactive props here\n    exampleProp: {\n      control: 'text',\n      description: 'Description of this prop',\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/**\n * Default state of the component\n */\nexport const Default: Story = {\n  args: {},\n};MDX Documentation Format\nExample :import { Meta, Story, Canvas, ArgsTable } from '@storybook/blocks';\nimport { YOUR_COMPONENT } from './your-component.stories';\n\n\n\n# Component Name\n\n## Overview\n\nDescription here...\n\n## Examples\n\n\n  \n\n\n## API Reference\n\nDocumentation Review Process\n\nSelf-Review: Before submitting, ensure your documentation follows all standards\nPeer Review: Another team member reviews the documentation for clarity and completeness\nAccessibility Review: Verify all accessibility requirements are documented\nTesting: Verify all examples work correctly and are accessible\nFinal Approval: Documentation is approved and merged\n\nQuality Standards\nContent Quality\n\n✅ Clear, concise, and accurate descriptions\n✅ Real-world examples and use cases\n✅ Complete API documentation\n✅ Accessibility guidelines\n✅ Best practices and recommendations\n\nTechnical Quality\n\n✅ All examples compile and run without errors\n✅ Interactive controls are functional\n✅ Code follows project style guidelines\n✅ TypeScript interfaces are properly documented\n✅ Component props are fully documented\n\nAccessibility Quality\n\n✅ Keyboard navigation documented\n✅ Screen reader support explained\n✅ ARIA attributes specified\n✅ Color contrast compliance noted\n✅ Focus management described\n\nDocumentation Templates\nUse the provided templates in .storybook/templates/:\n\ncomponent.stories.ts - Basic component story template\ncomponent.mdx - MDX documentation template\nargtypes-pattern.ts - Standard argTypes configuration\n\nFile Organization\nExample :projects/ngx-unnamed/src/lib/components/\n├── your-component/\n│   ├── your.component.ts\n│   ├── your.component.html\n│   ├── your.component.scss\n│   ├── your.component.spec.ts\n│   ├── your.component.stories.ts\n│   └── your.component.mdxRequired Properties for Stories\nAll component stories must include:\n\nTitle: Following the pattern Components/ComponentName\nComponent: Reference to the component class\nParameters: Including layout and description\nArgTypes: For all interactive props\nTags: Including ['autodocs']\nDefault Story: Showing the basic usage\n\nRequired Properties for MDX\nAll MDX documentation must include:\n\nMeta Block: With title and component reference\nOverview Section: Component description and purpose\nExamples Section: With Canvas and Story blocks\nAPI Reference: Using ArgsTable block\nAccessibility Section: Accessibility information\nBest Practices: Usage guidelines\n\nInteractive Controls\nAll interactive props should have:\n\n✅ Control type (select, text, boolean, number)\n✅ Description of the prop\n✅ Default value specified\n✅ Options for select controls\n✅ Proper type definitions\n\nTesting Documentation\n\nVerify all stories render correctly\nTest interactive controls functionality\nCheck accessibility compliance\nValidate code examples\nEnsure links work correctly\n\nCommon Documentation Mistakes to Avoid\n❌ Missing descriptions for props\n❌ Incomplete accessibility information\n❌ Non-functional examples\n❌ Missing best practices\n❌ Inconsistent formatting\n❌ Broken links or references\n❌ Missing use cases\n❌ Unclear component purpose\nResources for Documentation\n\nStorybook Documentation\nCompodoc Documentation\nAngular Style Guide\nWCAG Accessibility Guidelines\n\nGetting Help with Documentation\nIf you need help with documentation:\n\nCheck existing component examples in the codebase\nReview the templates in .storybook/templates/\nConsult this style guide\nAsk questions in GitHub discussions\nRequest a documentation review\n\n\nThank you for following these documentation standards! High-quality documentation helps make Unnamed UI accessible and easy to use for everyone.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^20.1.7\n        \n            @angular/common : ^20.1.7\n        \n            @angular/compiler : ^20.1.7\n        \n            @angular/core : ^20.1.7\n        \n            @angular/forms : ^20.1.7\n        \n            @angular/platform-browser : ^20.1.7\n        \n            @angular/platform-browser-dynamic : ^20.1.7\n        \n            @angular/router : ^20.1.7\n        \n            rxjs : ~7.8.0\n        \n            svg-to-ts : ^12.0.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\nUnnamed UI\n\n\n\nAn open-source angular component library\n\nUnnamed UI component library\n\n  \n\n\n\n\n\nUnnmed UI Icons\n\n\n  \n\n\n\n\n\n💾 Installation\nWe recommend using @angular/cli to install. It not only makes development easier, but also allows you to take advantage of the rich ecosystem of angular packages and tooling.\nExample :$ ng new PROJECT_NAME\n$ cd PROJECT_NAME\n$ ng add ngx-unnamed\nMore information about @angular/cli here.\n\nYou can also install ngx-unnamed with npm or yarn\nExample :$ npm install ngx-unnamed🔨 Usage\nImport the component modules you want to use into your app.module.ts file and feature modules.\nExample :import { NxButtonModule } from 'ngx-unnamed/button';\n\n@NgModule({\n  imports: [ NxButtonModule ]\n})\nexport class AppModule {\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        IconModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NxIconModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IconModule\n\n\n\ncluster_IconModule_imports\n\n\n\ncluster_IconModule_exports\n\n\n\ncluster_NxIconModule\n\n\n\n\nNxIconComponent\n\nNxIconComponent\n\n\n\nIconModule\n\nIconModule\n\nIconModule -->\n\nNxIconComponent->IconModule\n\n\n\n\n\nNxIconModule\n\nNxIconModule\n\nNxIconModule -->\n\nNxIconComponent->NxIconModule\n\n\n\n\n\nNxIconDirective\n\nNxIconDirective\n\nIconModule -->\n\nNxIconDirective->IconModule\n\n\n\nNxIconModule -->\n\nNxIconDirective->NxIconModule\n\n\n\n\n\nNxIconComponent \n\nNxIconComponent \n\nNxIconComponent  -->\n\nIconModule->NxIconComponent \n\n\n\n\n\nNxIconDirective \n\nNxIconDirective \n\nNxIconDirective  -->\n\nIconModule->NxIconDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AriaPoliteness   (projects/.../a11y.utility.ts)\n                        \n                        \n                            Breakpoint   (projects/.../responsive.utility.ts)\n                        \n                        \n                            FocusOrigin   (projects/.../focus-monitor.ts)\n                        \n                        \n                            NxButtonShapes   (projects/.../button.component.ts)\n                        \n                        \n                            NxButtonSizes   (projects/.../button.component.ts)\n                        \n                        \n                            NxButtonVariants   (projects/.../button.component.ts)\n                        \n                        \n                            NxInputSize   (projects/.../input.directive.ts)\n                        \n                        \n                            NxInputStatus   (projects/.../input.directive.ts)\n                        \n                        \n                            NxInputVariant   (projects/.../input.directive.ts)\n                        \n                        \n                            OverlayPlacement   (projects/.../overlay.service.ts)\n                        \n                        \n                            ThemeType   (projects/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-unnamed/src/lib/utils/a11y.utility.ts\n    \n    \n        \n            \n                \n                    \n                    AriaPoliteness\n                \n            \n            \n                \n                    Live region politeness levels for screen reader announcements.\n\n                \n            \n            \n                \n                        \"off\" | \"polite\" | \"assertive\"\n\n                \n            \n        \n    \n    projects/ngx-unnamed/src/lib/utils/responsive.utility.ts\n    \n    \n        \n            \n                \n                    \n                    Breakpoint\n                \n            \n            \n                \n                    Breakpoint names for responsive design.\n\n                \n            \n            \n                \n                        \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\"\n\n                \n            \n        \n    \n    projects/ngx-unnamed/src/lib/utils/focus-monitor.ts\n    \n    \n        \n            \n                \n                    \n                    FocusOrigin\n                \n            \n            \n                \n                    Describes the origin of a focus event.\n\n                \n            \n            \n                \n                        \"keyboard\" | \"mouse\" | \"touch\" | \"program\" | null\n\n                \n            \n        \n    \n    projects/ngx-unnamed/src/lib/components/button/button.component.ts\n    \n    \n        \n            \n                \n                    \n                    NxButtonShapes\n                \n            \n            \n                \n                        \"circle\" | \"round\" | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NxButtonSizes\n                \n            \n            \n                \n                        \"large\" | \"default\" | \"small\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NxButtonVariants\n                \n            \n            \n                \n                        \"primary\" | \"secondary\" | \"danger\" | \"outline\" | \"ghost\" | \"dashed\" | \"link\" | null\n\n                \n            \n        \n    \n    projects/ngx-unnamed/src/lib/components/input/input.directive.ts\n    \n    \n        \n            \n                \n                    \n                    NxInputSize\n                \n            \n            \n                \n                        \"large\" | \"default\" | \"small\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NxInputStatus\n                \n            \n            \n                \n                        \"error\" | \"warning\" | \"success\" | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NxInputVariant\n                \n            \n            \n                \n                        \"outlined\" | \"filled\" | \"borderless\"\n\n                \n            \n        \n    \n    projects/ngx-unnamed/src/lib/utils/overlay.service.ts\n    \n    \n        \n            \n                \n                    \n                    OverlayPlacement\n                \n            \n            \n                \n                    Placement options for overlays.\n\n                \n            \n            \n                \n                        \"top\" | \"topStart\" | \"topEnd\" | \"right\" | \"rightStart\" | \"rightEnd\" | \"bottom\" | \"bottomStart\" | \"bottomEnd\" | \"left\" | \"leftStart\" | \"leftEnd\"\n\n                \n            \n        \n    \n    projects/ngx-unnamed-icons/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    ThemeType\n                \n            \n            \n                \n                        \"fill\" | \"outline\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
